#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –º–æ–¥–µ–ª—è–º–∏ (GigaChat)
"""

import os
import logging
from typing import List, Dict, Any, Optional
from .llm_client import SimpleLLMClient

logger = logging.getLogger(__name__)

class LLMService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —è–∑—ã–∫–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ (GigaChat)"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        self.api_key = os.getenv('GIGACHAT_API_KEY')
        if not self.api_key:
            logger.warning("GIGACHAT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. LLM —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            self.client = None
        else:
            self.client = SimpleLLMClient(self.api_key)
    
    def format_search_answer(self, query: str, search_results: List[Dict[str, Any]]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
        
        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            search_results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ª—è–º–∏:
                - content: —Ç–µ–∫—Å—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                - similarity: –æ—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                - document_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                - chunk_index: –Ω–æ–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not self.client:
            return self._format_simple_answer(query, search_results)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GigaChat
            context_parts = []
            for i, result in enumerate(search_results[:3], 1):  # –ë–µ—Ä–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                context_parts.append(
                    f"–§—Ä–∞–≥–º–µ–Ω—Ç {i} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['similarity']:.3f}):\n"
                    f"{result['content']}\n"
                )
            
            context = "\n".join(context_parts)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è GigaChat
            formatted_question = f"""–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{query}"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
1. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É
2. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. –ï—Å–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö —É–ø–æ–º—è–Ω–∏
4. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, –ø–æ–Ω—è—Ç–Ω—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ - —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏

–î–∞–π –∫—Ä–∞—Ç–∫–∏–π, —Ç–æ—á–Ω—ã–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GigaChat
            response = self.client.generate_answer(
                context=context,
                question=formatted_question,
                max_tokens=500
            )
            
            if response.success:
                answer = response.text.strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                sources = []
                for result in search_results[:3]:
                    sources.append(f"üìÑ {result['document_name']} (—Ñ—Ä–∞–≥–º–µ–Ω—Ç #{result['chunk_index']})")
                
                formatted_answer = f"{answer}\n\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(sources)
                
                return formatted_answer
            else:
                logger.error(f"–û—à–∏–±–∫–∞ GigaChat: {response.error}")
                return self._format_simple_answer(query, search_results)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
            return self._format_simple_answer(query, search_results)
    
    def _format_simple_answer(self, query: str, search_results: List[Dict[str, Any]]) -> str:
        """
        –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ LLM (fallback)
        """
        if not search_results:
            return "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        
        best_result = search_results[0]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        content = best_result['content']
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        import re
        percentages = re.findall(r'\d+[.,]?\d*\s*–ø—Ä–æ—Ü–µ–Ω—Ç|\d+[.,]?\d*\s*%', content)
        amounts = re.findall(r'\d+[.,]?\d*\s*—Ä—É–±', content)
        times = re.findall(r'\d+\s*—á–∞—Å|\d+:\d+|—Å\s*\d+\s*–¥–æ\s*\d+', content)
        
        answer_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        if best_result['similarity'] >= 0.6:
            answer_parts.append("‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        else:
            answer_parts.append("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if percentages:
            answer_parts.append(f"üí∞ –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {', '.join(percentages)}")
        if amounts:
            answer_parts.append(f"üí∞ –°—É–º–º—ã: {', '.join(amounts)}")
        if times:
            answer_parts.append(f"‚è∞ –í—Ä–µ–º—è: {', '.join(times)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞
        answer_parts.append(f"\nüìù –ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞:")
        answer_parts.append(f'"{content[:300]}{"..." if len(content) > 300 else ""}"')
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫
        answer_parts.append(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫: {best_result['document_name']} (—Ñ—Ä–∞–≥–º–µ–Ω—Ç #{best_result['chunk_index']})")
        
        return "\n".join(answer_parts)
    
    def summarize_document(self, content: str, max_length: int = 200) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        if not self.client:
            return content[:max_length] + "..." if len(content) > max_length else content
        
        try:
            question = f"–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–± –æ–ø–ª–∞—Ç–µ —Ç—Ä—É–¥–∞ (–Ω–µ –±–æ–ª–µ–µ {max_length} —Å–∏–º–≤–æ–ª–æ–≤). –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ —Ä–∞–∑–º–µ—Ä–∞—Ö –æ–ø–ª–∞—Ç—ã, –Ω–∞–¥–±–∞–≤–∫–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö."

            response = self.client.generate_answer(
                context=content[:2000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                question=question,
                max_tokens=100
            )
            
            if response.success:
                return response.text.strip()
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {response.error}")
                return content[:max_length] + "..." if len(content) > max_length else content
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
            return content[:max_length] + "..." if len(content) > max_length else content
    
    def health_check(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ LLM —Å–µ—Ä–≤–∏—Å–∞
        """
        if not self.client:
            return False
        
        try:
            return self.client.health_check()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è LLM: {e}")
            return False 