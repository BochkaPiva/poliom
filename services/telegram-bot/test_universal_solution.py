#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ GigaChat
"""

import re

def extract_key_information(context: str, question: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    sources = re.split(r'\[–ò—Å—Ç–æ—á–Ω–∏–∫ \d+:', context)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    question_words = set(re.findall(r'\b\w+\b', question.lower()))
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    stop_words = {'–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', '–∏–∑', '–∫', '–æ', '–æ–±', '–∏', '–∏–ª–∏', '–∞', '–Ω–æ', '—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ', '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä—ã–µ'}
    question_words = question_words - stop_words
    
    relevant_info = []
    
    for source in sources[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç
        if not source.strip():
            continue
            
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        doc_match = re.search(r'^([^\]]+)\]', source)
        doc_name = doc_match.group(1) if doc_match else "–î–æ–∫—É–º–µ–Ω—Ç"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_text = source.split(']', 1)[-1].strip()
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        sentences = re.split(r'[.!?]+', source_text)
        
        for sentence in sentences:
            sentence = sentence.strip()
            if len(sentence) < 20:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                continue
                
            sentence_words = set(re.findall(r'\b\w+\b', sentence.lower()))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å–∞
            if question_words & sentence_words:
                relevant_info.append({
                    'text': sentence,
                    'source': doc_name,
                    'relevance': len(question_words & sentence_words)
                })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    relevant_info.sort(key=lambda x: x['relevance'], reverse=True)
    
    if not relevant_info:
        return None
        
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    response_parts = ["üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n"]
    
    used_sources = set()
    added_info = 0
    
    for info in relevant_info[:5]:  # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö
        if added_info >= 3:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤
            break
            
        text = info['text']
        source = info['source']
        
        # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if text not in [item['text'] for item in relevant_info[:added_info]]:
            response_parts.append(f"‚Ä¢ {text}")
            used_sources.add(source)
            added_info += 1
    
    if used_sources:
        response_parts.append(f"\n*–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(used_sources)}*")
    
    return "\n".join(response_parts)

def extract_specific_data_patterns(context: str, question: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–∞–Ω–Ω—ã—Ö (–¥–∞—Ç—ã, —á–∏—Å–ª–∞, –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ —Ç.–¥.)"""
    
    patterns = {
        'dates': r'\b\d{1,2}[-./]\d{1,2}[-./]\d{2,4}\b|\b\d{1,2}[-–µ\s]*(?:—á–∏—Å–ª–æ|—á–∏—Å–ª–∞)\b',
        'percentages': r'\b\d+(?:[.,]\d+)?%\b|\b\d+(?:[.,]\d+)?\s*–ø—Ä–æ—Ü–µ–Ω—Ç[–∞-—è]*\b',
        'money': r'\b\d+(?:\s?\d{3})*(?:[.,]\d+)?\s*(?:—Ä—É–±|—Ä—É–±–ª[–µ–π]*|—Ç—ã—Å|–º–ª–Ω)\b',
        'time': r'\b\d{1,2}:\d{2}\b|\b\d{1,2}\s*—á–∞—Å[–∞-—è]*\b',
        'periods': r'\b(?:–µ–∂–µ–º–µ—Å—è—á–Ω–æ|–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ|–µ–∂–µ–≥–æ–¥–Ω–æ|—Ä–∞–∑ –≤ –º–µ—Å—è—Ü|–¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü)\b'
    }
    
    found_data = []
    
    for pattern_name, pattern in patterns.items():
        matches = re.findall(pattern, context, re.IGNORECASE)
        if matches:
            found_data.extend(matches)
    
    if found_data:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_data = list(set(found_data))
        return f"**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:** {', '.join(unique_data)}"
    
    return None

def test_universal_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    test_context = """[–ò—Å—Ç–æ—á–Ω–∏–∫ 1: –ü—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞]
–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è 12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞. –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü. –ü–µ—Ä–≤–∞—è –≤—ã–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 50% –æ—Ç –æ–∫–ª–∞–¥–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è 15 —á–∏—Å–ª–∞. –í—Ç–æ—Ä–∞—è –≤—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è 27 —á–∏—Å–ª–∞ –∏ –≤–∫–ª—é—á–∞–µ—Ç –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã.

[–ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü–æ–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ —Ç—Ä—É–¥–∞]
–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é. –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –≤ –¥–≤–æ–π–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ. –û—Ç–ø—É—Å–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π. –ü—Ä–µ–º–∏–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–º–µ—Å—è—á–Ω–æ –≤ —Ä–∞–∑–º–µ—Ä–µ –¥–æ 30% –æ—Ç –æ–∫–ª–∞–¥–∞.

[–ò—Å—Ç–æ—á–Ω–∏–∫ 3: –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞]
–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º. –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 5000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü. –†–∞–±–æ—Ç–Ω–∏–∫–∞–º —Å –¥–µ—Ç—å–º–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–ø—É—Å–∫ 3 –¥–Ω—è –≤ –≥–æ–¥—É."""
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞?",
        "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è?",
        "–ö–∞–∫–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?",
        "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏?",
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞ –ø–æ–ª–æ–∂–µ–Ω–æ?",
        "–ï—Å—Ç—å –ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è?",
        "–ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞?"
    ]
    
    print("="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ú–ï–•–ê–ù–ò–ó–ú–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò")
    print("="*80)
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n--- –í–û–ü–†–û–° {i}: {question} ---")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        extracted_info = extract_key_information(test_context, question)
        
        if extracted_info:
            print("‚úÖ –ò–ó–í–õ–ï–ß–ï–ù–ê –ö–õ–Æ–ß–ï–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
            print(extracted_info)
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            specific_data = extract_specific_data_patterns(test_context, question)
            if specific_data:
                print("‚úÖ –ù–ê–ô–î–ï–ù–´ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –î–ê–ù–ù–´–ï:")
                print(f"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**\n\n{specific_data}\n\n*–ù–∞–π–¥–µ–Ω–æ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏*")
            else:
                print("‚ùå –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê")
        
        print("-" * 60)
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–• –ü–ê–¢–¢–ï–†–ù–û–í")
    print("="*80)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    patterns_test_context = """
    –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è 12-–≥–æ –∏ 27-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.
    –ü—Ä–µ–º–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 25% –æ—Ç –æ–∫–ª–∞–¥–∞.
    –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å 9:00 –¥–æ 18:00.
    –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∏—Ç–∞–Ω–∏—è 5000 —Ä—É–±–ª–µ–π.
    –û—Ç–ø—É—Å–∫ 28 –¥–Ω–µ–π –≤ –≥–æ–¥—É.
    –°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –≤ —Ä–∞–∑–º–µ—Ä–µ 150% –æ—Ç —Å—Ç–∞–≤–∫–∏.
    """
    
    specific_data = extract_specific_data_patterns(patterns_test_context, "–¥–∞–Ω–Ω—ã–µ")
    if specific_data:
        print("‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´:")
        print(specific_data)
    else:
        print("‚ùå –ü–ê–¢–¢–ï–†–ù–´ –ù–ï –ù–ê–ô–î–ï–ù–´")
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*80)

if __name__ == "__main__":
    test_universal_extraction() 