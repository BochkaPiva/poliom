#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ handlers
from bot.handlers import (
    is_blocked_response, 
    extract_key_information, 
    extract_specific_data_patterns,
    create_direct_answer
)

def test_salary_questions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞—Ä–ø–ª–∞—Ç–µ"""
    print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ:")
    print("=" * 60)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–ª–∞—Ç–∞—Ö (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ)
    context = """
    [–ò—Å—Ç–æ—á–Ω–∏–∫ 1: –û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞]
    –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü. –°—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –∑–∞ –ø–µ—Ä–≤—É—é –∏ –∑–∞ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É –º–µ—Å—è—Ü–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞ –û–±—â–µ—Å—Ç–≤–∞. –ü—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¥–Ω—è –≤—ã–ø–ª–∞—Ç—ã —Å –≤—ã—Ö–æ–¥–Ω—ã–º –∏–ª–∏ –Ω–µ—Ä–∞–±–æ—á–∏–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –¥–Ω–µ–º, –≤—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞–∫–∞–Ω—É–Ω–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏–ª–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.
    
    [–ò—Å—Ç–æ—á–Ω–∏–∫ 2: –ü—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞]
    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è 12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞.
    """
    
    questions = [
        "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∞—é –∑–∞—Ä–ø–ª–∞—Ç—É?",
        "–ó–∞—Ä–ø–ª–∞—Ç–∞",
        "–í—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã", 
        "–î–∞—Ç—ã –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã",
        "–†–∞–∑–º–µ—Ä –∑–∞—Ä–ø–ª–∞—Ç—ã",
        "–ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞?"
    ]
    
    for question in questions:
        print(f"\nüîç –í–æ–ø—Ä–æ—Å: {question}")
        print("-" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        extracted_info = extract_key_information(context, question)
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        if extracted_info:
            print(extracted_info)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        specific_data = extract_specific_data_patterns(context, question)
        print(f"\nüìä –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ:")
        if specific_data:
            print(specific_data)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç
        direct_answer = create_direct_answer(question, extracted_info, specific_data)
        print(f"\nüí¨ –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç:")
        if direct_answer:
            print(direct_answer)
        else:
            print("–ù–µ —Å–æ–∑–¥–∞–Ω")
        
        print("\n" + "=" * 60)

def test_blocked_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    print("=" * 60)
    
    blocked_responses = [
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "–ö–∞–∫ –∏ –ª—é–±–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, GigaChat –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º"
    ]
    
    for response in blocked_responses:
        is_blocked = is_blocked_response(response)
        print(f"üìù –û—Ç–≤–µ—Ç: {response[:50]}...")
        print(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–ê' if is_blocked else '–ù–ï–¢'}")
        print("-" * 40)

def test_fallback_mechanism():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º fallback-–º–µ—Ö–∞–Ω–∏–∑–º"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback-–º–µ—Ö–∞–Ω–∏–∑–º–∞:")
    print("=" * 60)
    
    # –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
    empty_context = ""
    
    salary_questions = [
        "–ö–æ–≥–¥–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞?",
        "–í—ã–ø–ª–∞—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã",
        "–ü–æ–ª—É—á–∞—é –¥–µ–Ω—å–≥–∏ –∫–æ–≥–¥–∞?"
    ]
    
    for question in salary_questions:
        print(f"\nüîç –í–æ–ø—Ä–æ—Å: {question}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        extracted_info = extract_key_information(empty_context, question)
        specific_data = extract_specific_data_patterns(empty_context, question)
        
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ: {'–î–∞' if extracted_info else '–ù–µ—Ç'}")
        print(f"üìä –î–∞–Ω–Ω—ã–µ: {'–î–∞' if specific_data else '–ù–µ—Ç'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback
        direct_answer = create_direct_answer(question, extracted_info, specific_data)
        print(f"üí¨ Fallback –æ—Ç–≤–µ—Ç:")
        if direct_answer:
            print(direct_answer[:200] + "..." if len(direct_answer) > 200 else direct_answer)
        else:
            print("–ù–µ —Å–æ–∑–¥–∞–Ω")
        
        print("-" * 40)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò –í–û–ü–†–û–°–û–í –û –ó–ê–†–ü–õ–ê–¢–ï")
    print("=" * 80)
    
    test_salary_questions()
    test_blocked_responses()
    test_fallback_mechanism()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    load_dotenv()
    main() 