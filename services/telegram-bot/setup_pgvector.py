#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ PostgreSQL
"""

import os
import sys
from pathlib import Path
import psycopg2
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

from bot.config import Config

def setup_pgvector():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è...")
    
    try:
        config = Config()
        database_url = config.DATABASE_URL
        
        # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if database_url.startswith('postgresql://'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            import urllib.parse
            parsed = urllib.parse.urlparse(database_url)
            
            conn_params = {
                'host': parsed.hostname,
                'port': parsed.port or 5432,
                'database': parsed.path[1:],  # —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–µ—à
                'user': parsed.username,
                'password': parsed.password
            }
            
            print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {conn_params['host']}:{conn_params['port']}/{conn_params['database']}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = psycopg2.connect(**conn_params)
            conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
            
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            cursor.execute("SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'vector');")
            extension_exists = cursor.fetchone()[0]
            
            if extension_exists:
                print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector...")
                try:
                    cursor.execute("CREATE EXTENSION vector;")
                    print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                except psycopg2.Error as e:
                    if "does not exist" in str(e):
                        print("‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ pgvector –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ")
                        print("üí° –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å pgvector –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ PostgreSQL:")
                        print("   - –î–ª—è Ubuntu/Debian: sudo apt install postgresql-15-pgvector")
                        print("   - –î–ª—è CentOS/RHEL: sudo yum install pgvector")
                        print("   - –î–ª—è Docker: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞–∑ pgvector/pgvector")
                        return False
                    else:
                        raise e
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <=>
            try:
                cursor.execute("SELECT '[1,2,3]'::vector <=> '[1,2,3]'::vector;")
                result = cursor.fetchone()[0]
                print(f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <=> —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result})")
            except psycopg2.Error as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ <=>: {e}")
                return False
            
            cursor.close()
            conn.close()
            
            print("üéâ pgvector –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ pgvector: {e}")
        return False

def create_vector_index():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    try:
        config = Config()
        database_url = config.DATABASE_URL
        
        # –ü–∞—Ä—Å–∏–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import urllib.parse
        parsed = urllib.parse.urlparse(database_url)
        
        conn_params = {
            'host': parsed.hostname,
            'port': parsed.port or 5432,
            'database': parsed.path[1:],
            'user': parsed.username,
            'password': parsed.password
        }
        
        conn = psycopg2.connect(**conn_params)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã document_chunks
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'document_chunks'
            );
        """)
        
        table_exists = cursor.fetchone()[0]
        
        if not table_exists:
            print("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ document_chunks –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ embedding
        cursor.execute("""
            SELECT data_type 
            FROM information_schema.columns 
            WHERE table_name = 'document_chunks' AND column_name = 'embedding';
        """)
        
        result = cursor.fetchone()
        if result:
            data_type = result[0]
            print(f"üìã –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ embedding: {data_type}")
            
            if data_type != 'USER-DEFINED':  # vector —Ç–∏–ø –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ USER-DEFINED
                print("üîÑ –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ embedding –Ω–∞ vector...")
                try:
                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    cursor.execute("DELETE FROM document_chunks;")
                    
                    # –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏
                    cursor.execute("ALTER TABLE document_chunks ALTER COLUMN embedding TYPE vector(1024);")
                    print("‚úÖ –¢–∏–ø –∫–æ–ª–æ–Ω–∫–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ vector(1024)")
                except psycopg2.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–ª–æ–Ω–∫–∏: {e}")
                    return False
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        try:
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS document_chunks_embedding_idx 
                ON document_chunks USING ivfflat (embedding vector_cosine_ops) 
                WITH (lists = 100);
            """)
            print("‚úÖ –ò–Ω–¥–µ–∫—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω")
        except psycopg2.Error as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å: {e}")
            print("üí° –ò–Ω–¥–µ–∫—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        cursor.close()
        conn.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pgvector –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("=" * 50)
    
    if setup_pgvector():
        if create_vector_index():
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    else:
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å") 