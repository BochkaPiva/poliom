#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å API –∫–ª—é—á–æ–º GigaChat
"""

import sys
import os
import base64
import json
import requests
import uuid
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_root = Path(__file__).parent.parent.parent
env_path = project_root / '.env'
load_dotenv(env_path)

def diagnose_api_key():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API –∫–ª—é—á–∞"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ê GIGACHAT")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á
    gigachat_key = os.getenv("GIGACHAT_API_KEY")
    
    if not gigachat_key:
        print("‚ùå GIGACHAT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {gigachat_key[:20]}...")
    print(f"üìè –î–ª–∏–Ω–∞: {len(gigachat_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á
    try:
        decoded = base64.b64decode(gigachat_key)
        decoded_str = decoded.decode('utf-8')
        print(f"‚úÖ Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        if ':' in decoded_str:
            client_id, client_secret = decoded_str.split(':', 1)
            print(f"üÜî Client ID: {client_id}")
            print(f"üîê Client Secret: {client_secret[:10]}...")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ scope
    scopes = [
        "GIGACHAT_API_PERS",
        "GIGACHAT_API_B2B", 
        "GIGACHAT_API_CORP"
    ]
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ù–´–• SCOPE:")
    print("-" * 40)
    
    for scope in scopes:
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É—é scope: {scope}")
        success = test_token_with_scope(gigachat_key, scope)
        if success:
            print(f"‚úÖ Scope {scope} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå Scope {scope} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    print(f"\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –ü–†–û–ë–õ–ï–ú–´:")
    print("-" * 40)
    print("1. üïê API –∫–ª—é—á –∏—Å—Ç–µ–∫ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è)")
    print("2. üîÑ –ö–ª—é—á –±—ã–ª –æ—Ç–æ–∑–≤–∞–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
    print("3. üìã –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π scope –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("4. üè¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("5. üí≥ –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π/–ª–∏–º–∏—Ç–∞–º–∏")
    print("6. üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –°–±–µ—Ä–∞")
    
    return False

def test_token_with_scope(api_key, scope):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º scope"""
    
    try:
        url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
        
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json",
            "RqUID": str(uuid.uuid4()),
            "Authorization": f"Basic {api_key}"
        }
        
        data = {
            "scope": scope
        }
        
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            if access_token:
                print(f"  ‚úÖ Access token –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
                return True
        else:
            error_data = response.json() if response.content else {}
            print(f"  ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {error_data}")
            
    except Exception as e:
        print(f"  ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

def check_account_type():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    print(f"\nüìã –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ê–ö–ö–ê–£–ù–¢–ê:")
    print("-" * 40)
    print("–î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ scope –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–∏–ø –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:")
    print("‚Ä¢ GIGACHAT_API_PERS - —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ª–∏—Ü–∞")
    print("‚Ä¢ GIGACHAT_API_B2B - –ò–ü –∏ —é—Ä.–ª–∏—Ü–∞ (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞)")
    print("‚Ä¢ GIGACHAT_API_CORP - –ò–ü –∏ —é—Ä.–ª–∏—Ü–∞ (–ø–æ—Å—Ç–æ–ø–ª–∞—Ç–∞)")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ:")
    print("https://developers.sber.ru/portal/products/gigachat")

def show_recovery_steps():
    """–®–∞–≥–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    print(f"\nüîß –®–ê–ì–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø:")
    print("-" * 40)
    print("1. üåê –ó–∞–π–¥–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç GigaChat")
    print("2. üîç –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("3. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("4. üí∞ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç—ã")
    print("5. üîë –ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç–µ Authorization Data")
    print("6. üìù –û–±–Ω–æ–≤–∏—Ç–µ GIGACHAT_API_KEY –≤ .env")
    print("7. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    
    print(f"\n‚ö†Ô∏è –í–ê–ñ–ù–û:")
    print("- –ö–ª—é—á–∏ –º–æ–≥—É—Ç –∏—Å—Ç–µ–∫–∞—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    print("- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å scope –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")

if __name__ == "__main__":
    success = diagnose_api_key()
    check_account_type()
    show_recovery_steps()
    
    if not success:
        print(f"\nüí• –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞!")
        sys.exit(1)
    else:
        print(f"\nüéâ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!") 