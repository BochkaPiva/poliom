#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram-–±–æ—Ç–∞ POLIOM
–ü—Ä–æ–≤–µ—Ä–∫–∞ FAQ –∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(current_dir))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = project_root / '.env'
if env_path.exists():
    load_dotenv(env_path)

async def test_faq_data():
    """–¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö FAQ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FAQ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from bot.faq_data import FAQ_DATA, get_faq_sections, get_section_questions, get_answer, search_faq
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É FAQ
        sections = get_faq_sections()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤ FAQ: {len(sections)}")
        
        for section in sections:
            questions = get_section_questions(section)
            print(f"  üìã {section}: {len(questions)} –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ FAQ
        search_results = search_faq("–æ–ø–ª–∞—Ç–∞")
        print(f"‚úÖ –ü–æ–∏—Å–∫ '–æ–ø–ª–∞—Ç–∞': –Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        first_section = sections[0]
        first_questions = get_section_questions(first_section)
        if first_questions:
            answer = get_answer(first_section, first_questions[0])
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: {len(answer['answer'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ FAQ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_search_service():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º mock SearchService –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockSearchService:
            def search(self, query, max_results=5):
                return {'results': []}
        
        search_service = MockSearchService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        print("‚úÖ SearchService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        try:
            results = search_service.search("–æ—Ç–ø—É—Å–∫", max_results=2)
            print(f"‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {len(results.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        except Exception as search_error:
            print(f"‚ö†Ô∏è –ü–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {search_error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–º —Å–µ—Ä–≤–∏—Å–µ: {e}")
        return False

async def test_llm_service():
    """–¢–µ—Å—Ç LLM —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        from services.shared.utils.llm_service import LLMService
        
        llm_service = LLMService()
        print("‚úÖ LLMService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
        try:
            health_status = llm_service.health_check()
            print(f"‚úÖ Health check: {health_status}")
        except Exception as health_error:
            print(f"‚ö†Ô∏è Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ LLM —Å–µ—Ä–≤–∏—Å–µ: {e}")
        return False

async def test_bot_handlers():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –∏ RAG —Å–µ—Ä–≤–∏—Å–∞
        from bot.handlers import router
        from bot.rag_service import RAGService
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º Router
        if router:
            print("‚úÖ –†–æ—É—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ö†Ô∏è –†–æ—É—Ç–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é RAG —Å–µ—Ä–≤–∏—Å–∞
        try:
            # –°–æ–∑–¥–∞–µ–º RAG —Å–µ—Ä–≤–∏—Å —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
            rag_service = RAGService("test_key")
            print("‚úÖ RAGService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as rag_error:
            print(f"‚ö†Ô∏è RAGService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {rag_error}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –±–æ—Ç–∞: {e}")
        return False

async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        from bot.config import Config
        
        config = Config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        has_bot_token = bool(config.TELEGRAM_BOT_TOKEN)
        has_gigachat_key = bool(config.GIGACHAT_API_KEY)
        has_db_url = bool(config.DATABASE_URL)
        
        print(f"‚úÖ TELEGRAM_BOT_TOKEN: {'‚úì' if has_bot_token else '‚úó'}")
        print(f"‚úÖ GIGACHAT_API_KEY: {'‚úì' if has_gigachat_key else '‚úó'}")
        print(f"‚úÖ DATABASE_URL: {'‚úì' if has_db_url else '‚úó'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        is_valid = config.validate()
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {is_valid}")
        
        return is_valid
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ POLIOM Telegram Bot - –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    tests = [
        ("FAQ –¥–∞–Ω–Ω—ã–µ", test_faq_data),
        ("–ü–æ–∏—Å–∫–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å", test_search_service),
        ("LLM —Å–µ—Ä–≤–∏—Å", test_llm_service),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞", test_bot_handlers),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"{'='*50}")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"{'='*50}")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 