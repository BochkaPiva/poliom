#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

from bot.config import config
from bot.rag_service import RAGService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def is_blocked_response(response: str) -> bool:
    """–¢–æ—á–Ω–æ —Ç–∞–∫–∞—è –∂–µ —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ –≤ handlers.py"""
    blocked_phrases = [
        "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
        "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "–ö–∞–∫ –∏ –ª—é–±–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, GigaChat –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã",
        "–æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
        "–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã"
    ]
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    if any(phrase in response for phrase in blocked_phrases):
        return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç
    if ("–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü" in response.lower() and 
        "—Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç—ã" in response.lower() and 
        "—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö" in response.lower() and
        not any(date in response for date in ['12', '27', '15'])):
        return True
    
    return False

async def test_bot_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –ª–æ–≥–∏–∫–∏ –∫–∞–∫ –≤ –±–æ—Ç–µ"""
    
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ë–û–¢–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    rag_service = RAGService(config.GIGACHAT_API_KEY)
    await rag_service.initialize()
    print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_questions = [
        "–ö–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –µ—Å—Ç—å –∫ —é–±–∏–ª–µ–π–Ω—ã–º –¥–∞—Ç–∞–º?",
        "–û—Ç–ø—É—Å–∫",
        "–Æ–±–∏–ª–µ–π–Ω—ã–µ –¥–∞—Ç—ã",
        "–ö–æ–≥–¥–∞ —è –º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫"
    ]
    
    for i, message_text in enumerate(test_questions, 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: '{message_text}'")
        print("-" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
            result = await rag_service.answer_question(message_text, user_id=123)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
            if not result or 'answer' not in result:
                response_text = "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
                print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç: {response_text}")
                continue
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            chunks = result.get('chunks', [])
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            relevant_chunks = []
            
            if chunks:
                # –§–∏–ª—å—Ç—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
                for j, chunk in enumerate(chunks):
                    similarity = chunk.get('similarity', 0)
                    logger.info(f"–ß–∞–Ω–∫ {j+1}: similarity={similarity}")
                    
                    if similarity >= 0.25:  # –ï—â–µ –±–æ–ª—å—à–µ —Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        relevant_chunks.append(chunk)
                        logger.info(f"–ß–∞–Ω–∫ {j+1} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π (similarity={similarity})")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —á–∞–Ω–∫ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞
                        question_words = set(message_text.lower().split())
                        chunk_words = set(chunk.get('content', '').lower().split())
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —á–∞–Ω–∫
                        overlap = question_words & chunk_words
                        if len(overlap) >= 1:
                            relevant_chunks.append(chunk)
                            logger.info(f"–ß–∞–Ω–∫ {j+1} –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {overlap}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
            logger.info(f"–ò—Ç–æ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {len(relevant_chunks)}")
            logger.info(f"–û—Ç–≤–µ—Ç GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {is_blocked_response(result['answer'])}")
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            print(f"   ‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {len(relevant_chunks)}")
            print(f"   ‚Ä¢ GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {is_blocked_response(result['answer'])}")
            print(f"   ‚Ä¢ –û—Ç–≤–µ—Ç GigaChat: {result['answer'][:100]}...")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –±–æ—Ç–µ
            if len(relevant_chunks) > 0:
                if is_blocked_response(result['answer']):
                    logger.info("GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º extract_key_information")
                    response_text = "üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (GigaChat –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)"
                else:
                    logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–≤–µ—Ç GigaChat")
                    response_text = result['answer']
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                    if result.get('sources'):
                        response_text += "\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**"
                        for j, source in enumerate(result['sources'], 1):
                            title = source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')
                            response_text += f"\n{j}. {title}"
            else:
                logger.info("–ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                response_text = "üîç **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞**"
            
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_text[:200]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(test_bot_logic()) 