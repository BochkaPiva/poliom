#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(current_dir))

from bot.rag_service import RAGService
from bot.config import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

async def test_rag_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG —Å–µ—Ä–≤–∏—Å–∞"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ï–†–í–ò–°–ê")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º RAG —Å–µ—Ä–≤–∏—Å
        rag_service = RAGService(config.GIGACHAT_API_KEY)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
        await rag_service.initialize()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        health = await rag_service.health_check()
        print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'‚úÖ' if health['overall'] else '‚ùå'}")
        print(f"LLM: {'‚úÖ' if health['llm'] else '‚ùå'}")
        print(f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏: {'‚úÖ' if health['embeddings'] else '‚ùå'}")
        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if health['database'] else '‚ùå'}")
        print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {health['documents_count']}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?",
            "–†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏",
            "–ü—Ä–µ–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–µ–π–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏?",
            "–£—Å–ª–æ–≤–∏—è –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã"
        ]
        
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê")
        print("=" * 60)
        
        for i, question in enumerate(test_questions, 1):
            print(f"\n{i}. –í–æ–ø—Ä–æ—Å: '{question}'")
            print("-" * 40)
            
            try:
                result = await rag_service.answer_question(question, user_id=1)
                
                if result['success']:
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                    print(f"üìù –û—Ç–≤–µ—Ç: {result['answer'][:200]}...")
                    print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.get('sources', []))}")
                    
                    if result.get('sources'):
                        print("üìñ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                        for j, source in enumerate(result['sources'][:3], 1):
                            print(f"   {j}. {source.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not config.validate():
        print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        return
    
    await test_rag_service()

if __name__ == "__main__":
    asyncio.run(main()) 