"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
import sys
from pathlib import Path
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

from aiogram import Dispatcher, types, F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

try:
    from bot.config import Config
    from bot.database import log_user_query, get_user_stats, check_database_health, get_documents_count, get_or_create_user, get_menu_sections, get_menu_items, get_menu_item_content
    from bot.rag_service import RAGService
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    import os
    import sys
    current_dir = os.path.dirname(os.path.abspath(__file__))
    sys.path.insert(0, current_dir)
    
    from config import Config
    from database import log_user_query, get_user_stats, check_database_health, get_documents_count, get_or_create_user, get_menu_sections, get_menu_items, get_menu_item_content
    from rag_service import RAGService

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ RAG —Å–µ—Ä–≤–∏—Å
config = Config()
rag_service = RAGService(config.GIGACHAT_API_KEY)

router = Router()

def create_faq_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è FAQ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    try:
        sections = get_menu_sections()
        keyboard_buttons = []
        
        for section in sections:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=section['title'], 
                    callback_data=f"faq_section_{section['id']}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è FAQ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ", callback_data="back_to_main")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        return keyboard

def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö FAQ", callback_data="show_faq")],
        [InlineKeyboardButton(text="üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="smart_search")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")],
        [InlineKeyboardButton(text="üè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", callback_data="show_health")]
    ])
    return keyboard

def create_section_keyboard(section_id: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ"""
    try:
        items = get_menu_items(section_id)
        keyboard_buttons = []
        
        for item in items:
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=item['title'], 
                    callback_data=f"faq_item_{item['id']}"
                )
            ])
        
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–∞ {section_id}: {e}")
        # Fallback –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="show_faq")],
            [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
        ])
        return keyboard

async def get_or_create_user_async(telegram_id: int, username: str = None, 
                                 first_name: str = None, last_name: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è get_or_create_user"""
    import asyncio
    loop = asyncio.get_event_loop()
    
    return await loop.run_in_executor(
        None, 
        get_or_create_user, 
        telegram_id, 
        username, 
        first_name,
        last_name
    )

async def log_user_query_async(user_id: int, query: str, response: str, 
                              response_time: float = None, similarity_score: float = None,
                              documents_used: str = None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è log_user_query"""
    import asyncio
    loop = asyncio.get_event_loop()
    
    return await loop.run_in_executor(
        None,
        log_user_query,
        user_id,
        query,
        response,
        response_time,
        similarity_score,
        documents_used
    )

@router.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        if not user.is_active:
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ **POLIOM HR Assistant** - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

**–ß—Ç–æ —è —É–º–µ—é:**
üìö **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
üìã **–¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""
        
        await message.answer(welcome_text.strip(), reply_markup=create_main_keyboard(), parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("help"))
async def help_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/health - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?"
‚Ä¢ "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?"
‚Ä¢ "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É–≤–æ–ª—å–Ω–µ–Ω–∏—è"
‚Ä¢ "–†–∞–∑–º–µ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É"

ü§ñ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
    
    await message.answer(help_text.strip())

@router.message(Command("stats"))
async def stats_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import asyncio
        loop = asyncio.get_event_loop()
        stats = await loop.run_in_executor(
            None,
            get_user_stats,
            message.from_user.id
        )
        
        if 'error' in stats:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {(stats['first_name'] or '') + (' ' + stats['last_name'] if stats['last_name'] else '') or stats['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî **ID:** {stats['telegram_id']}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {stats['created_at'].strftime('%d.%m.%Y %H:%M') if stats['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìù **–ó–∞–ø—Ä–æ—Å–æ–≤:** {stats['query_count']}
üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:** {stats['last_query_at'].strftime('%d.%m.%Y %H:%M') if stats['last_query_at'] else '–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""
        
        await message.answer(stats_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.message(Command("health"))
async def health_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /health"""
    try:
        health_status = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            db_health = await loop.run_in_executor(None, check_database_health)
            if db_health:
                health_status.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                health_status.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–∏—Å
        try:
            rag_health = await rag_service.health_check()
            if rag_health.get('overall', False):
                health_status.append("‚úÖ RAG —Å–µ—Ä–≤–∏—Å: OK")
            else:
                health_status.append("‚ùå RAG —Å–µ—Ä–≤–∏—Å: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå RAG —Å–µ—Ä–≤–∏—Å: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            docs_count = await loop.run_in_executor(None, get_documents_count)
            health_status.append(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {docs_count}")
        except Exception as e:
            health_status.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã: {str(e)[:50]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        health_message = "üè• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n" + "\n".join(health_status)
        
        await message.answer(health_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ health_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")

@router.message(F.text)
async def question_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        
        if not user.is_active:
            await message.answer(
                "‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        processing_message = await message.answer("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
        result = await rag_service.answer_question(message.text, user.id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_message.delete()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if result.get('success', False):
            answer_text = result['answer']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
            if result.get('sources'):
                answer_text += "\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**"
                for i, source in enumerate(result['sources'][:3], 1):
                    answer_text += f"\n{i}. {source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')}"
        else:
            answer_text = result.get('answer', '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(answer_text)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        await log_user_query_async(
            user_id=user.id,
            query=message.text,
            response=answer_text
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ question_handler: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@router.callback_query(F.data == "show_faq")
async def show_faq_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å FAQ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=create_faq_keyboard(),
        parse_mode='Markdown'
    )
    await callback.answer()

@router.callback_query(F.data == "show_stats")
async def show_stats_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ callback"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await get_or_create_user_async(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        import asyncio
        loop = asyncio.get_event_loop()
        stats = await loop.run_in_executor(
            None,
            get_user_stats,
            callback.from_user.id
        )
        
        if 'error' in stats:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats_text = f"""üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {(stats['first_name'] or '') + (' ' + stats['last_name'] if stats['last_name'] else '') or stats['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üÜî **ID:** {stats['telegram_id']}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {stats['created_at'].strftime('%d.%m.%Y %H:%M') if stats['created_at'] else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
üìù **–ó–∞–ø—Ä–æ—Å–æ–≤:** {stats['query_count']}
üïê **–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å:** {stats['last_query_at'].strftime('%d.%m.%Y %H:%M') if stats['last_query_at'] else '–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤'}
‚úÖ **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if stats['is_active'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}"""
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=back_keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_stats_callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    await callback.answer()

@router.callback_query(F.data == "show_health")
async def show_health_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ callback"""
    try:
        health_status = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            db_health = await loop.run_in_executor(None, check_database_health)
            if db_health:
                health_status.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: OK")
            else:
                health_status.append("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG —Å–µ—Ä–≤–∏—Å
        try:
            rag_health = await rag_service.health_check()
            if rag_health.get('overall', False):
                health_status.append("‚úÖ RAG —Å–µ—Ä–≤–∏—Å: OK")
            else:
                health_status.append("‚ùå RAG —Å–µ—Ä–≤–∏—Å: –û—à–∏–±–∫–∞")
        except Exception as e:
            health_status.append(f"‚ùå RAG —Å–µ—Ä–≤–∏—Å: {str(e)[:50]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        try:
            import asyncio
            loop = asyncio.get_event_loop()
            docs_count = await loop.run_in_executor(None, get_documents_count)
            health_status.append(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {docs_count}")
        except Exception as e:
            health_status.append(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã: {str(e)[:50]}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        health_message = "üè• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n" + "\n".join(health_status)
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(health_message, reply_markup=back_keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_health_callback: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    welcome_text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

ü§ñ **POLIOM HR Assistant** - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ç—Ä—É–¥–æ–≤—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π.

**–ß—Ç–æ —è —É–º–µ—é:**
üìö **FAQ** - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫** - –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏
üìã **–¢–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã** - —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –Ø –Ω–∞–π–¥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"""
    
    await callback.message.edit_text(welcome_text.strip(), reply_markup=create_main_keyboard(), parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data.startswith("faq_section_"))
async def faq_section_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ FAQ"""
    try:
        section_id = int(callback.data.replace("faq_section_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–¥–µ–ª–µ
        sections = get_menu_sections()
        section = next((s for s in sections if s['id'] == section_id), None)
        
        if not section:
            await callback.message.edit_text(
                "‚ùå –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
                ])
            )
            await callback.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        keyboard = create_section_keyboard(section_id)
        
        section_text = f"üìö **{section['title']}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
        if section['description']:
            section_text = f"üìö **{section['title']}**\n\n{section['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:"
        
        await callback.message.edit_text(
            section_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_section_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("faq_item_"))
async def faq_item_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ FAQ"""
    try:
        item_id = int(callback.data.replace("faq_item_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é
        item_data = get_menu_item_content(item_id)
        
        if not item_data:
            await callback.message.edit_text(
                "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
                ])
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        answer_text = f"‚ùì **{item_data['title']}**\n\n{item_data['content']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        answer_text += "\n\nüìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π POLIOM"
        answer_text += "\nüìã **–¢–∏–ø:** –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è HR-–æ—Ç–¥–µ–ª–∞"
        answer_text += "\n‚úÖ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            answer_text,
            reply_markup=back_keyboard,
            parse_mode='Markdown'
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä FAQ
        user = await get_or_create_user_async(
            telegram_id=callback.from_user.id,
            username=callback.from_user.username,
            first_name=callback.from_user.first_name,
            last_name=callback.from_user.last_name
        )
        
        await log_user_query_async(
            user_id=user.id,
            query=f"FAQ: {item_data['title']}",
            response=item_data['content'],
            documents_used="FAQ Database"
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_item_callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–≤–µ—Ç–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ö —Ä–∞–∑–¥–µ–ª–∞–º", callback_data="show_faq")]
            ])
        )
    
    await callback.answer()

@router.callback_query(F.data == "smart_search")
async def smart_search_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    await callback.message.edit_text(
        "üîç **–£–º–Ω—ã–π –ø–æ–∏—Å–∫**\n\n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.\n\n**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n‚Ä¢ –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?\n‚Ä¢ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?\n‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode='Markdown'
    )
    await callback.answer()

@router.callback_query(F.data.startswith("faq_"))
async def old_faq_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—ã—Ö FAQ callback (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤–æ–µ FAQ –º–µ–Ω—é
    await show_faq_callback(callback)

def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram
    """
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    logger.info("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã") 