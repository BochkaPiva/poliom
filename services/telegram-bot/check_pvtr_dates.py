import os
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def get_db_connection():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(
        host=os.getenv('DB_HOST', 'localhost'),
        port=os.getenv('DB_PORT', '5432'),
        database=os.getenv('DB_NAME', 'poliom_db'),
        user=os.getenv('DB_USER', 'postgres'),
        password=os.getenv('DB_PASSWORD', 'password')
    )

def search_pvtr_payment_dates():
    """–ü–æ–∏—Å–∫ –¥–∞—Ç –≤—ã–ø–ª–∞—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ü–í–¢–†"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print("üîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–ü—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞'...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–í–¢–† (ID=3)
        cursor.execute("""
            SELECT id, content, chunk_index
            FROM document_chunks 
            WHERE document_id = 3
            ORDER BY chunk_index
        """)
        
        pvtr_chunks = cursor.fetchall()
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(pvtr_chunks)} —á–∞–Ω–∫–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ü–í–¢–†")
        
        # –ò—â–µ–º —á–∞–Ω–∫–∏ —Å –¥–∞—Ç–∞–º–∏ –≤—ã–ø–ª–∞—Ç
        payment_keywords = ['15', '27', '12', '—á–∏—Å–ª–æ', '–¥–∞—Ç–∞', '—Å—Ä–æ–∫', '–≤—ã–ø–ª–∞—Ç', '–∑–∞—Ä–ø–ª–∞—Ç', '–∞–≤–∞–Ω—Å', '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞']
        
        relevant_chunks = []
        for chunk in pvtr_chunks:
            content_lower = chunk['content'].lower()
            if any(keyword in content_lower for keyword in payment_keywords):
                relevant_chunks.append(chunk)
        
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(relevant_chunks)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤:")
        
        for chunk in relevant_chunks:
            print(f"\n--- –ß–∞–Ω–∫ {chunk['id']} (–∏–Ω–¥–µ–∫—Å {chunk['chunk_index']}) ---")
            print(chunk['content'][:500] + "..." if len(chunk['content']) > 500 else chunk['content'])
            print("-" * 80)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–∞–Ω–∫–æ–≤ —Å —á–∏—Å–ª–∞–º–∏ 12, 15, 27
        print("\nüéØ –ü–æ–∏—Å–∫ —á–∞–Ω–∫–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏:")
        
        for number in ['12', '15', '27']:
            cursor.execute("""
                SELECT id, content, chunk_index
                FROM document_chunks 
                WHERE document_id = 3 AND content ILIKE %s
                ORDER BY chunk_index
            """, (f'%{number}%',))
            
            number_chunks = cursor.fetchall()
            if number_chunks:
                print(f"\nüìÖ –ß–∞–Ω–∫–∏ —Å —á–∏—Å–ª–æ–º '{number}' ({len(number_chunks)} –Ω–∞–π–¥–µ–Ω–æ):")
                for chunk in number_chunks:
                    print(f"–ß–∞–Ω–∫ {chunk['id']}: {chunk['content'][:200]}...")
            else:
                print(f"\n‚ùå –ß–∞–Ω–∫–∏ —Å —á–∏—Å–ª–æ–º '{number}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        cursor.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

if __name__ == "__main__":
    search_pvtr_payment_dates() 