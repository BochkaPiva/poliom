#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'shared'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ handlers
from bot.handlers import (
    is_blocked_response, 
    extract_key_information, 
    extract_specific_data_patterns,
    create_direct_answer
)

def test_blocked_response_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    
    test_cases = [
        "–Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ",
        "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ–º—ã",
        "–û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–µ",
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ]
    
    for case in test_cases:
        result = is_blocked_response(case)
        print(f"  '{case[:50]}...' -> {'–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù' if result else '–†–ê–ó–†–ï–®–ï–ù'}")
    print()

def test_key_information_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")
    
    context = """
    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è 12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞.
    –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü.
    –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 8 —á–∞—Å–æ–≤.
    –û—Ç–ø—É—Å–∫ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –≤ –≥–æ–¥—É.
    """
    
    questions = [
        "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∞—é –∑–∞—Ä–ø–ª–∞—Ç—É?",
        "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å?",
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞?"
    ]
    
    for question in questions:
        result = extract_key_information(context, question)
        print(f"  –í–æ–ø—Ä–æ—Å: {question}")
        print(f"  –û—Ç–≤–µ—Ç: {result[:100] if result else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}...")
        print()

def test_specific_data_extraction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üî¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:")
    
    context = """
    –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è 12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞.
    –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü.
    –†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15% –æ—Ç –æ–∫–ª–∞–¥–∞.
    –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–µ–¥–∞ 500 —Ä—É–±–ª–µ–π.
    """
    
    questions = [
        "–ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∞?",
        "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏?"
    ]
    
    for question in questions:
        result = extract_specific_data_patterns(context, question)
        print(f"  –í–æ–ø—Ä–æ—Å: {question}")
        print(f"  –î–∞–Ω–Ω—ã–µ: {result[:150] if result else '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}...")
        print()

def test_direct_answer_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
    print("üí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    
    extracted_info = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è 12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞"
    specific_data = "üìä **–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\nüí∞ **–î–∞—Ç—ã –≤—ã–ø–ª–∞—Ç:**\n‚Ä¢ 12-–µ —á–∏—Å–ª–æ\n‚Ä¢ 27-–µ —á–∏—Å–ª–æ"
    
    questions = [
        "–ö–æ–≥–¥–∞ —è –ø–æ–ª—É—á–∞—é –∑–∞—Ä–ø–ª–∞—Ç—É?",
        "–ö–∞–∫–æ–π —É –Ω–∞—Å —Ä–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫?",
        "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞?"
    ]
    
    for question in questions:
        result = create_direct_answer(question, extracted_info, specific_data)
        print(f"  –í–æ–ø—Ä–æ—Å: {question}")
        print(f"  –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç: {result[:150]}...")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞\n")
    print("=" * 60)
    
    test_blocked_response_detection()
    test_key_information_extraction()
    test_specific_data_extraction()
    test_direct_answer_creation()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    load_dotenv()
    main() 