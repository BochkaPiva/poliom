#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞–Ω–∫–∞ 2130 —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç–∞—Ö –≤—ã–ø–ª–∞—Ç
"""

import sys
import asyncio
from pathlib import Path
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(project_root / ".env")
load_dotenv(project_root / "services" / "telegram-bot" / ".env.local")

try:
    from bot.rag_service import RAGService
    from bot.config import Config
    from bot.database import get_db_session
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

async def main():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞–Ω–∫–∞ 2130"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
        rag_service = RAGService(config.GIGACHAT_API_KEY)
        await rag_service.initialize()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        db_session = next(get_db_session())
        
        print("\n" + "=" * 80)
        print("–û–¢–õ–ê–î–ö–ê –ü–û–ò–°–ö–ê –ß–ê–ù–ö–ê 2130")
        print("=" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–∞–Ω–∫–∞ 2130
        from sqlalchemy import text
        
        query = text("SELECT id, document_id, content FROM document_chunks WHERE id = 2130")
        result = db_session.execute(query)
        chunk_2130 = result.fetchone()
        
        if chunk_2130:
            print(f"–ß–∞–Ω–∫ 2130 –Ω–∞–π–¥–µ–Ω:")
            print(f"–î–æ–∫—É–º–µ–Ω—Ç ID: {chunk_2130.document_id}")
            print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {chunk_2130.content[:200]}...")
        else:
            print("–ß–∞–Ω–∫ 2130 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        test_queries = [
            "12 –∏ 27 —á–∏—Å–ª–æ",
            "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤",
            "–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞",
            "12-–µ –∏ 27-–µ —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞"
        ]
        
        for query in test_queries:
            print(f"\n--- –¢–ï–°–¢ –ü–û–ò–°–ö–ê: '{query}' ---")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            loop = asyncio.get_event_loop()
            chunks = await loop.run_in_executor(
                None,
                rag_service.rag_system.search_relevant_chunks,
                query,
                15
            )
            
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤:")
            
            found_2130 = False
            for i, chunk in enumerate(chunks, 1):
                chunk_id = chunk.get('id', 'N/A')
                similarity = chunk.get('similarity', 'N/A')
                content_preview = chunk.get('content', '')[:100] + "..."
                
                if chunk_id == 2130:
                    found_2130 = True
                    print(f"  ‚úÖ {i}. –ß–∞–Ω–∫ {chunk_id} (similarity: {similarity})")
                    print(f"      {content_preview}")
                else:
                    print(f"  {i}. –ß–∞–Ω–∫ {chunk_id} (similarity: {similarity})")
                    print(f"      {content_preview}")
            
            if found_2130:
                print("  üéØ –ß–ê–ù–ö 2130 –ù–ê–ô–î–ï–ù!")
            else:
                print("  ‚ùå –ß–∞–Ω–∫ 2130 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")
        
        print("\n" + "=" * 80)
        print("–û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        print("=" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 