#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "services" / "shared"))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ bot –º–æ–¥—É–ª—é
bot_path = Path(__file__).parent
sys.path.insert(0, str(bot_path))

def test_file_security_checks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
    
    print("üîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤\n")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    from bot.handlers import is_file_allowed_for_sharing, check_user_file_limit, MAX_FILES_PER_HOUR
    
    # –¢–µ—Å—Ç 1: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    print("üìù –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤")
    
    test_cases_allowed = [
        ("–¥–æ–∫—É–º–µ–Ω—Ç.pdf", "pdf", True),
        ("–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.docx", "docx", True),
        ("—Ç–∞–±–ª–∏—Ü–∞.xlsx", "xlsx", True),
        ("—Å—Ç–∞—Ä—ã–π_—Ñ–∞–π–ª.doc", "doc", True),
        ("–¥–∞–Ω–Ω—ã–µ.txt", "txt", True),
    ]
    
    for file_path, file_type, expected in test_cases_allowed:
        result = is_file_allowed_for_sharing(file_path, file_type)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} {file_path} ({file_type}) -> {result}")
    
    # –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
    print("\nüö´ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤")
    
    test_cases_forbidden = [
        ("–ø—Ä–æ–≥—Ä–∞–º–º–∞.exe", "exe", False),
        ("–∞—Ä—Ö–∏–≤.zip", "zip", False),
        ("–≤–∏–¥–µ–æ.mp4", "mp4", False),
        ("script.py", "py", False),
    ]
    
    for file_path, file_type, expected in test_cases_forbidden:
        result = is_file_allowed_for_sharing(file_path, file_type)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} {file_path} ({file_type}) -> {result}")
    
    # –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    print("\nüîí –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏")
    
    test_cases_forbidden_words = [
        ("–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ_–¥–∞–Ω–Ω—ã–µ.pdf", "pdf", False),
        ("—Å–µ–∫—Ä–µ—Ç–Ω–æ_–¥–æ–∫—É–º–µ–Ω—Ç.docx", "docx", False),
        ("–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.xlsx", "xlsx", False),
        ("–∑–∞—Ä–ø–ª–∞—Ç–∞_—Å–ø–∏—Å–æ–∫_–º–∞—Ä—Ç.pdf", "pdf", False),
        ("password_database.txt", "txt", False),
        ("–æ–±—ã—á–Ω—ã–π_–¥–æ–∫—É–º–µ–Ω—Ç.pdf", "pdf", True),  # –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
    ]
    
    for file_path, file_type, expected in test_cases_forbidden_words:
        result = is_file_allowed_for_sharing(file_path, file_type)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} {file_path} -> {result}")
    
    # –¢–µ—Å—Ç 4: –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print(f"\n‚è∞ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∞–∫—Å. {MAX_FILES_PER_HOUR} —Ñ–∞–π–ª–æ–≤/—á–∞—Å)")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    from bot.handlers import USER_FILE_LIMITS
    test_user_id = 999999
    if test_user_id in USER_FILE_LIMITS:
        del USER_FILE_LIMITS[test_user_id]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç
    success_count = 0
    for i in range(MAX_FILES_PER_HOUR + 3):  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç
        result = check_user_file_limit(test_user_id)
        if result:
            success_count += 1
        print(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {'‚úÖ' if result else '‚ùå'} ({success_count} —É—Å–ø–µ—à–Ω—ã—Ö)")
        
        if success_count == MAX_FILES_PER_HOUR and not result:
            print(f"  üéØ –õ–∏–º–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å–ª–µ {MAX_FILES_PER_HOUR} —Ñ–∞–π–ª–æ–≤")
            break
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º: —Ä–∞–±–æ—Ç–∞–µ—Ç") 
    print(f"  ‚Ä¢ –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å: {MAX_FILES_PER_HOUR}")

def test_file_validation_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤")
    
    from bot.handlers import is_file_allowed_for_sharing
    
    edge_cases = [
        ("", "pdf", False),  # –ü—É—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        ("—Ñ–∞–π–ª.PDF", "PDF", True),  # –ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã
        ("file_with_–ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û.pdf", "pdf", False),  # –°–º–µ—à–∞–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
        ("normal-file.pdf", "pdf", True),  # –î–µ—Ñ–∏—Å—ã –≤ –∏–º–µ–Ω–∏
        ("—Ñ–∞–π–ª —Å –ø—Ä–æ–±–µ–ª–∞–º–∏.docx", "docx", True),  # –ü—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∏
        ("—Ñ–∞–π–ª123.txt", "txt", True),  # –¶–∏—Ñ—Ä—ã –≤ –∏–º–µ–Ω–∏
    ]
    
    for file_path, file_type, expected in edge_cases:
        result = is_file_allowed_for_sharing(file_path, file_type)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"  {status} '{file_path}' ({file_type}) -> {result}")

if __name__ == "__main__":
    try:
        test_file_security_checks()
        test_file_validation_edge_cases()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc() 