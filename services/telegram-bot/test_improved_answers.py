#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ markdown
2. –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
3. –¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

from dotenv import load_dotenv
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from services.shared.utils.simple_rag import SimpleRAG
from services.shared.utils.llm_client import SimpleLLMClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
env_path = project_root / '.env'
if env_path.exists():
    load_dotenv(env_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π .env —Ñ–∞–π–ª: {env_path}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
local_env_path = Path(__file__).parent / '.env'
if local_env_path.exists():
    load_dotenv(local_env_path, override=True)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π .env —Ñ–∞–π–ª: {local_env_path}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º DATABASE_URL
database_url = os.getenv('DATABASE_URL')
print(f"üîó DATABASE_URL: {database_url}")

def test_improved_answers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç–≤–µ—Ç–æ–≤"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –û–¢–í–ï–¢–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏—Å–ø–æ–ª—å–∑—É—è DATABASE_URL
        if not database_url:
            print("‚ùå DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
            
        engine = create_engine(database_url)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        db_session = SessionLocal()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG
        gigachat_key = os.getenv('GIGACHAT_API_KEY')
        if not gigachat_key:
            print("‚ùå GIGACHAT_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
            return False
            
        rag_system = SimpleRAG(db_session, gigachat_key)
        print("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        {
            "question": "–ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–ø–ª–∞—Ç–∞?",
            "expected_keywords": ["15", "30", "–∞–≤–∞–Ω—Å", "–æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å"],
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–ø–ª–∞—Ç—ã"
        },
        {
            "question": "–†–∞–∑–º–µ—Ä –¥–æ–ø–ª–∞—Ç—ã –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É",
            "expected_keywords": ["40", "–ø—Ä–æ—Ü–µ–Ω—Ç", "%"],
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ø–ª–∞—Ç"
        },
        {
            "question": "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?",
            "expected_keywords": ["–∑–∞—è–≤–ª–µ–Ω–∏–µ", "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"],
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞"
        },
        {
            "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–µ–π–¥ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏?",
            "expected_keywords": ["–≥—Ä–µ–π–¥", "–¥–æ–ª–∂–Ω–æ—Å—Ç"],
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä–µ–π–¥–∞"
        },
        {
            "question": "–†–∞–∑–º–µ—Ä –ø—Ä–µ–º–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "expected_keywords": ["–ø—Ä–µ–º–∏—è", "—Ä–∞–∑–º–µ—Ä"],
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–º–∏—è—Ö"
        }
    ]
    
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤...")
    print("-" * 60)
    
    results = []
    
    for i, test_case in enumerate(test_questions, 1):
        print(f"\nüìù –¢–ï–°–¢ {i}: {test_case['description']}")
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test_case['question']}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = rag_system.answer_question(test_case['question'])
            
            if result['success']:
                answer = result['answer']
                sources = result['sources']
                
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({result['tokens_used']} —Ç–æ–∫–µ–Ω–æ–≤)")
                print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(sources)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                print("\nüìã –û–¢–í–ï–¢:")
                print("-" * 40)
                print(answer)
                print("-" * 40)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                if sources:
                    print("\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò:")
                    unique_titles = set()
                    for j, source in enumerate(sources, 1):
                        title = source['title']
                        if title in unique_titles:
                            print(f"‚ö†Ô∏è  {j}. {title} (–î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï!)")
                        else:
                            print(f"‚úÖ {j}. {title}")
                            unique_titles.add(title)
                else:
                    unique_titles = set()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                found_keywords = []
                for keyword in test_case['expected_keywords']:
                    if keyword.lower() in answer.lower():
                        found_keywords.append(keyword)
                
                if found_keywords:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(found_keywords)}")
                else:
                    print("‚ö†Ô∏è  –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º markdown —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                markdown_chars = ['*', '_', '`', '[', ']']
                unescaped_chars = []
                for char in markdown_chars:
                    if char in answer and f'\\{char}' not in answer:
                        unescaped_chars.append(char)
                
                if unescaped_chars:
                    print(f"‚ö†Ô∏è  –ù–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ markdown —Å–∏–º–≤–æ–ª—ã: {unescaped_chars}")
                else:
                    print("‚úÖ Markdown —Å–∏–º–≤–æ–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã")
                
                results.append({
                    'question': test_case['question'],
                    'success': True,
                    'keywords_found': len(found_keywords),
                    'sources_count': len(sources),
                    'has_duplicates': len(sources) != len(unique_titles),
                    'markdown_ok': len(unescaped_chars) == 0,
                    'tokens_used': result['tokens_used']
                })
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                results.append({
                    'question': test_case['question'],
                    'success': False,
                    'error': result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                })
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            results.append({
                'question': test_case['question'],
                'success': False,
                'error': str(e)
            })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 60)
    
    successful_tests = [r for r in results if r['success']]
    total_tests = len(results)
    success_rate = len(successful_tests) / total_tests * 100
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_tests)}/{total_tests} ({success_rate:.1f}%)")
    
    if successful_tests:
        total_tokens = sum(r['tokens_used'] for r in successful_tests)
        avg_sources = sum(r['sources_count'] for r in successful_tests) / len(successful_tests)
        duplicates_count = sum(1 for r in successful_tests if r['has_duplicates'])
        markdown_ok_count = sum(1 for r in successful_tests if r['markdown_ok'])
        
        print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_tokens}")
        print(f"üìÑ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {avg_sources:.1f}")
        print(f"üîÑ –¢–µ—Å—Ç–æ–≤ —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {duplicates_count}")
        print(f"üìù –¢–µ—Å—Ç–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º markdown: {markdown_ok_count}/{len(successful_tests)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        print("\nüéØ –ü–†–û–í–ï–†–ö–ê –£–õ–£–ß–®–ï–ù–ò–ô:")
        if duplicates_count == 0:
            print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —É—Å—Ç—Ä–∞–Ω–µ–Ω–æ")
        else:
            print(f"‚ö†Ô∏è  –í—Å–µ –µ—â–µ –µ—Å—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ {duplicates_count} —Ç–µ—Å—Ç–∞—Ö")
            
        if markdown_ok_count == len(successful_tests):
            print("‚úÖ Markdown —Å–∏–º–≤–æ–ª—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –≤–æ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–∞—Ö")
        else:
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å markdown –≤ {len(successful_tests) - markdown_ok_count} –æ—Ç–≤–µ—Ç–∞—Ö")
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return success_rate > 80

if __name__ == "__main__":
    success = test_improved_answers()
    sys.exit(0 if success else 1) 