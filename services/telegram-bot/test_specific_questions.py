#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

from bot.config import config
from bot.rag_service import RAGService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_specific_questions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–ù–´–• –í–û–ü–†–û–°–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    rag_service = RAGService(config.GIGACHAT_API_KEY)
    await rag_service.initialize()
    print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_questions = [
        "–≤—ã–ø–ª–∞—Ç—ã –∫ —é–±–∏–ª–µ–π–Ω—ã–º –¥–∞—Ç–∞–º",
        "–æ—Ç–ø—É—Å–∫"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"{i}. –í–æ–ø—Ä–æ—Å: '{question}'")
        print("-" * 40)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            result = await rag_service.answer_question(question, user_id=123)
            
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            print(f"üìù –û—Ç–≤–µ—Ç: {result['answer'][:200]}...")
            print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(result.get('sources', []))}")
            
            if result.get('sources'):
                print("üìñ –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                for j, source in enumerate(result['sources'], 1):
                    print(f"   {j}. {source}")
            
            print(f"üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(result.get('context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print()

if __name__ == "__main__":
    asyncio.run(test_specific_questions()) 