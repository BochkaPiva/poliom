#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –≤ LLM
"""

import sys
import asyncio
from pathlib import Path
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(project_root / ".env")
load_dotenv(project_root / "services" / "telegram-bot" / ".env.local")

try:
    from bot.rag_service import RAGService
    from bot.config import Config
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

async def main():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
        rag_service = RAGService(config.GIGACHAT_API_KEY)
        await rag_service.initialize()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        question = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏"
        
        print(f"\n--- –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê –î–õ–Ø –í–û–ü–†–û–°–ê: {question} ---")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –Ω–∞–ø—Ä—è–º—É—é
        chunks = rag_service.rag_system.search_relevant_chunks(question, 50)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ò—â–µ–º —á–∞–Ω–∫ 2130
        chunk_2130_found = False
        chunk_2130_position = None
        
        for i, chunk in enumerate(chunks, 1):
            if chunk.get('id') == 2130:
                chunk_2130_found = True
                chunk_2130_position = i
                print(f"\nüéØ –ß–ê–ù–ö 2130 –ù–ê–ô–î–ï–ù –ù–ê –ü–û–ó–ò–¶–ò–ò {i}!")
                print(f"Similarity: {chunk.get('similarity', 'N/A')}")
                print(f"Search type: {chunk.get('search_type', 'N/A')}")
                print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {chunk.get('content', '')[:200]}...")
                break
        
        if not chunk_2130_found:
            print("\n‚ùå –ß–∞–Ω–∫ 2130 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞
        context = rag_service.rag_system.format_context(chunks)
        
        print(f"\n--- –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ö–°–¢–ê ---")
        print(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö 12 –∏ 27
        if '12' in context and '27' in context:
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ 12 –∏ 27")
        else:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–∞ 12 –∏ 27")
        
        if '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤' in context.lower():
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–∑—É –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö")
        else:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—Ä–∞–∑—É –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        context_lower = context.lower()
        keywords = ['12', '27', '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏', '—Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏']
        
        print(f"\n--- –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í –í –ö–û–ù–¢–ï–ö–°–¢–ï ---")
        for keyword in keywords:
            if keyword in context_lower:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
                pos = context_lower.find(keyword)
                start = max(0, pos - 100)
                end = min(len(context), pos + 100)
                fragment = context[start:end]
                print(f"‚úÖ '{keyword}' –Ω–∞–π–¥–µ–Ω–æ:")
                print(f"   ...{fragment}...")
            else:
                print(f"‚ùå '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with open('context_debug.txt', 'w', encoding='utf-8') as f:
            f.write(f"–í–æ–ø—Ä–æ—Å: {question}\n")
            f.write(f"–ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}\n")
            f.write(f"–ß–∞–Ω–∫ 2130 –Ω–∞–π–¥–µ–Ω: {chunk_2130_found}\n")
            if chunk_2130_found:
                f.write(f"–ü–æ–∑–∏—Ü–∏—è —á–∞–Ω–∫–∞ 2130: {chunk_2130_position}\n")
            f.write(f"–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤\n")
            f.write("\n" + "="*80 + "\n")
            f.write("–ü–û–õ–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:\n")
            f.write("="*80 + "\n")
            f.write(context)
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª 'context_debug.txt'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 