#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
"""

import sys
import os
import asyncio
from pathlib import Path
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

async def test_file_sending_feature():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê –û–¢–ü–†–ê–í–ö–ò –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        from bot.config import config
        from bot.rag_service import RAGService
        
        rag_service = RAGService(config.GIGACHAT_API_KEY)
        await rag_service.initialize()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    test_question = "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?"
    print(f"‚ùì –¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: '{test_question}'")
    print("-" * 60)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å —Ñ–∞–π–ª–∞–º–∏
        result = await rag_service.answer_question(test_question, user_id=123)
        
        if not result or 'answer' not in result:
            print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            return
        
        print("üìù –û–¢–í–ï–¢ –ü–û–õ–£–ß–ï–ù:")
        print(result.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω')[:200] + "...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files = result.get('files', [])
        print(f"\nüìé –ù–ê–ô–î–ï–ù–û –§–ê–ô–õ–û–í: {len(files)}")
        
        if files:
            print("\nüìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –§–ê–ô–õ–ê–•:")
            for i, file_info in enumerate(files, 1):
                print(f"\n{i}. {file_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   üìÑ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è: {file_info.get('original_filename', 'N/A')}")
                print(f"   üìÅ –ü—É—Ç—å: {file_info.get('file_path', 'N/A')}")
                print(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {file_info.get('similarity', 0):.1%}")
                print(f"   üìè –†–∞–∑–º–µ—Ä: {file_info.get('file_size', 0)} –±–∞–π—Ç")
                print(f"   üìã –¢–∏–ø: {file_info.get('file_type', 'N/A')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                file_path = file_info.get('file_path')
                if file_path:
                    file_path_obj = Path(file_path)
                    if file_path_obj.exists():
                        actual_size = file_path_obj.stat().st_size
                        print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–∞–∑–º–µ—Ä: {actual_size} –±–∞–π—Ç)")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è Telegram
                        if actual_size > 50 * 1024 * 1024:
                            print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª –±–æ–ª—å—à–µ 50MB - –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Telegram")
                        else:
                            print(f"   ‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram")
                    else:
                        print(f"   ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù –ù–ê –î–ò–°–ö–ï")
                else:
                    print(f"   ‚ùå –ü–£–¢–¨ –ö –§–ê–ô–õ–£ –ù–ï –£–ö–ê–ó–ê–ù")
        else:
            print("‚ÑπÔ∏è –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = result.get('sources', [])
        print(f"\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò: {len(sources)}")
        for i, source in enumerate(sources, 1):
            print(f"   {i}. {source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')}")
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {result.get('chunks_found', 0)}")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {result.get('tokens_used', 0)}")
        print(f"   ‚Ä¢ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {result.get('context_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

async def test_file_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–õ–ò–î–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_files = [
        {
            'title': '–ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª',
            'file_path': '/path/to/small_file.pdf',
            'file_size': 1024  # 1KB
        },
        {
            'title': '–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª',
            'file_path': '/path/to/big_file.pdf', 
            'file_size': 60 * 1024 * 1024  # 60MB
        },
        {
            'title': '–§–∞–π–ª –±–µ–∑ –ø—É—Ç–∏',
            'file_path': None,
            'file_size': 2048
        }
    ]
    
    for i, file_info in enumerate(test_files, 1):
        print(f"\n{i}. {file_info['title']}")
        
        file_path = file_info.get('file_path')
        file_size = file_info.get('file_size', 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if file_size > 50 * 1024 * 1024:
            print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {file_size / (1024*1024):.1f} MB")
        else:
            print(f"   ‚úÖ –†–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç: {file_size / 1024:.1f} KB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏
        if not file_path:
            print(f"   ‚ùå –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚úÖ –ü—É—Ç—å —É–∫–∞–∑–∞–Ω: {file_path}")
    
    print("\n" + "=" * 40)

if __name__ == "__main__":
    asyncio.run(test_file_sending_feature())
    asyncio.run(test_file_validation()) 