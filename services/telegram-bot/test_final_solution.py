#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ GigaChat
"""

import os
import sys
import asyncio
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
current_dir = os.path.dirname(os.path.abspath(__file__))
root_dir = os.path.join(current_dir, '..', '..')
sys.path.insert(0, root_dir)

from services.shared.config import Config
from services.telegram_bot.services.rag_service import RAGService

# –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestMessageHandler:
    def __init__(self, config: Config, rag_service):
        self.config = config
        self.rag_service = rag_service

    def is_blocked_response(self, response: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç GigaChat"""
        blocked_phrases = [
            "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –æ–±–ª–∞–¥–∞—é—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º",
            "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
            "—Ä–∞–∑–≥–æ–≤–æ—Ä—ã –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã",
            "–ö–∞–∫ –∏ –ª—é–±–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, GigaChat –Ω–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –º–Ω–µ–Ω–∏–µ–º"
        ]
        return any(phrase in response for phrase in blocked_phrases)

    def get_payment_dates_fallback(self, question: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –¥–∞—Ç–∞—Ö –≤—ã–ø–ª–∞—Ç"""
        payment_keywords = [
            '–∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—Ç–∞', '–≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è', 
            '—Ä–∞—Å—á–µ—Ç', '—Ä–∞—Å—á–µ—Ç—ã', '–¥–Ω–∏ –≤—ã–ø–ª–∞—Ç', '—Å—Ä–æ–∫–∏ –≤—ã–ø–ª–∞—Ç', '–ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å'
        ]
        
        if any(keyword in question.lower() for keyword in payment_keywords):
            return """üìÖ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞—Ç–∞—Ö –≤—ã–ø–ª–∞—Ç**

–°–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º:
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è **12-–µ** –∏ **27-–µ** —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
‚Ä¢ –í—ã–ø–ª–∞—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è **–¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü**

*–ò—Å—Ç–æ—á–Ω–∏–∫: –ü—Ä–∞–≤–∏–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞*"""
        
        return None

async def test_message_handler():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Config()
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞
    rag_service = RAGService(config)
    print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_handler = TestMessageHandler(config, rag_service)
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–°–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ç—Ä—É–¥–æ–≤–æ–≥–æ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–∞, –≤ –∫–∞–∫–∏–µ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞?",
        "–ö–∞–∫–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–Ω–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ü–í–¢–†?",
        "12 –∏ 27 —á–∏—Å–ª–æ - —ç—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏ –≤—ã–ø–ª–∞—Ç?",
        "–î–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü - –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤—ã–ø–ª–∞—Ç—ã?",
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å—Ä–æ–∫–∞—Ö –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –≤ –∫–æ–º–ø–∞–Ω–∏–∏",
        "–ö–∞–∫–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤—ã–ø–ª–∞—Ç –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞?"
    ]
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ì–û –†–ï–®–ï–ù–ò–Ø")
    print("="*80)
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n--- –í–û–ü–†–û–° {i}: {question} ---")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RAG —Å–∏—Å—Ç–µ–º—ã
        response = await rag_service.answer_question(question)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –æ—Ç–≤–µ—Ç
        is_blocked = message_handler.is_blocked_response(response)
        
        if is_blocked:
            print("‚ùå –û–¢–í–ï–¢ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù GigaChat")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç
            fallback_response = message_handler.get_payment_dates_fallback(question)
            if fallback_response:
                print("‚úÖ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –û–¢–í–ï–¢:")
                print(fallback_response)
            else:
                print("‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚úÖ –û–¢–í–ï–¢ –ü–û–õ–£–ß–ï–ù:")
            print(response)
        
        print("-" * 60)
    
    print("\n" + "="*80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*80)

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    asyncio.run(test_message_handler()) 