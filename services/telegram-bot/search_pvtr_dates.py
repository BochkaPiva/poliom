#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞—Ç –≤—ã–ø–ª–∞—Ç –≤ –ü–í–¢–†
"""

import sys
import asyncio
from pathlib import Path
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(project_root / ".env")
load_dotenv(project_root / "services" / "telegram-bot" / ".env.local")

try:
    from bot.rag_service import RAGService
    from bot.config import Config
    from bot.database import get_db_session
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

async def main():
    """–ü–æ–∏—Å–∫ –¥–∞—Ç –≤ –ü–í–¢–†"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
        rag_service = RAGService(config.GIGACHAT_API_KEY)
        await rag_service.initialize()
        print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø—Ä—è–º—É—é
        db_session = next(get_db_session())
        
        print("\nüîç –ü–û–ò–°–ö –í–°–ï–• –ß–ê–ù–ö–û–í –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê '–ü–†–ê–í–ò–õ–ê –í–ù–£–¢–†–ï–ù–ù–ï–ì–û –¢–†–£–î–û–í–û–ì–û –†–ê–°–ü–û–†–Ø–î–ö–ê'")
        print("=" * 80)
        
        from sqlalchemy import text
        
        # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ü–í–¢–†
        query = text("""
            SELECT dc.id, dc.document_id, dc.content, d.title
            FROM document_chunks dc
            JOIN documents d ON dc.document_id = d.id
            WHERE d.title ILIKE '%–ø—Ä–∞–≤–∏–ª%–≤–Ω—É—Ç—Ä–µ–Ω–Ω%—Ç—Ä—É–¥–æ–≤%—Ä–∞—Å–ø–æ—Ä—è–¥–∫%'
            ORDER BY dc.chunk_index
        """)
        
        result = db_session.execute(query)
        chunks_pvtr = result.fetchall()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(chunks_pvtr)} —á–∞–Ω–∫–æ–≤ –≤ –ü–í–¢–†:")
        
        # –ò—â–µ–º —á–∞–Ω–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ –∏–ª–∏ –¥–∞—Ç–∞–º–∏
        relevant_chunks = []
        for chunk in chunks_pvtr:
            content_lower = chunk.content.lower()
            if any(word in content_lower for word in ['15', '25', '—á–∏—Å–ª–æ', '–¥–∞—Ç–∞', '—Å—Ä–æ–∫', '–≤—ã–ø–ª–∞—Ç', '–∑–∞—Ä–ø–ª–∞—Ç', '–∞–≤–∞–Ω—Å']):
                relevant_chunks.append(chunk)
        
        print(f"\n–ò–∑ –Ω–∏—Ö {len(relevant_chunks)} —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–∞—Ö/–≤—ã–ø–ª–∞—Ç–∞—Ö:")
        
        for i, chunk in enumerate(relevant_chunks, 1):
            print(f"\n--- –ß–ê–ù–ö {i} (ID: {chunk.id}) ---")
            print(chunk.content)
            print("-" * 80)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print(f"\nüîç –ü–û–ò–°–ö –ß–ê–ù–ö–û–í –°–û –°–õ–û–í–ê–ú–ò –û –í–´–ü–õ–ê–¢–ê–•")
        print("=" * 80)
        
        query = text("""
            SELECT dc.id, dc.document_id, dc.content, d.title
            FROM document_chunks dc
            JOIN documents d ON dc.document_id = d.id
            WHERE (dc.content ILIKE '%–≤—ã–ø–ª–∞—Ç%–∑–∞—Ä–ø–ª–∞—Ç%' 
                   OR dc.content ILIKE '%–≤—ã–ø–ª–∞—Ç%–∑–∞—Ä–∞–±–æ—Ç–Ω%'
                   OR dc.content ILIKE '%—Å—Ä–æ–∫%–≤—ã–ø–ª–∞—Ç%'
                   OR dc.content ILIKE '%–¥–∞—Ç–∞%–≤—ã–ø–ª–∞—Ç%'
                   OR dc.content ILIKE '%–≥—Ä–∞—Ñ–∏–∫%–≤—ã–ø–ª–∞—Ç%')
            ORDER BY d.title, dc.chunk_index
        """)
        
        result = db_session.execute(query)
        payment_chunks = result.fetchall()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(payment_chunks)} —á–∞–Ω–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—ã–ø–ª–∞—Ç–∞—Ö:")
        
        for i, chunk in enumerate(payment_chunks, 1):
            print(f"\n--- –ß–ê–ù–ö {i} (ID: {chunk.id}, –î–æ–∫—É–º–µ–Ω—Ç: {chunk.title}) ---")
            print(chunk.content[:500] + "..." if len(chunk.content) > 500 else chunk.content)
            print("-" * 80)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 