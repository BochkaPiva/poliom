#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞
"""

import asyncio
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

from bot.config import config
from bot.rag_service import RAGService

async def test_formatting():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–û–í")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Å–µ—Ä–≤–∏—Å
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–µ—Ä–≤–∏—Å–∞...")
    rag_service = RAGService(config.GIGACHAT_API_KEY)
    await rag_service.initialize()
    print("‚úÖ RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        "–ö–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –µ—Å—Ç—å –∫ —é–±–∏–ª–µ–π–Ω—ã–º –¥–∞—Ç–∞–º?",
        "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏?",
        "–ö–æ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –æ—Ç–ø—É—Å–∫?",
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\n{i}. –í–æ–ø—Ä–æ—Å: '{question}'")
        print("-" * 50)
        
        try:
            result = await rag_service.answer_question(question, user_id=123)
            
            if not result or 'answer' not in result:
                print("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                continue
            
            print("üìù –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢:")
            print(result.get('answer', '–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω'))
            
            print("\nüìö –ò–°–¢–û–ß–ù–ò–ö–ò:")
            sources = result.get('sources', [])
            for j, source in enumerate(sources, 1):
                title = source.get('title', '–î–æ–∫—É–º–µ–Ω—Ç')
                print(f"{j}. {title}")
            
            print(f"\nüìÑ –§–ê–ô–õ–´ ({len(result.get('files', []))} —à—Ç.):")
            files = result.get('files', [])
            for j, file in enumerate(files, 1):
                print(f"{j}. {file}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        
        print("\n" + "=" * 60)

if __name__ == "__main__":
    asyncio.run(test_formatting()) 