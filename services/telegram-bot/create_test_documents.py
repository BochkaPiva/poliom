#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "services" / "telegram-bot"))

from bot.config import config
from bot.database import get_db_session
from sentence_transformers import SentenceTransformer
from sqlalchemy import text
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_documents():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db_session = next(get_db_session())
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        embeddings_model = SentenceTransformer('ai-forever/sbert_large_nlu_ru')
        logger.info("–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_documents = [
            {
                'title': '–ü–æ–ª–∏—Ç–∏–∫–∞ –æ–ø–ª–∞—Ç—ã —Ç—Ä—É–¥–∞',
                'content': '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –¥–≤–∞ —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü: –∞–≤–∞–Ω—Å 15 —á–∏—Å–ª–∞, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å - –¥–æ 5 —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞. –†–∞–∑–º–µ—Ä –∞–≤–∞–Ω—Å–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40% –æ—Ç –æ–∫–ª–∞–¥–∞. –ü—Ä–µ–º–∏–∏ –≤—ã–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è –µ–∂–µ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–æ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞–±–æ—Ç—ã.',
                'filename': 'salary_policy.pdf'
            },
            {
                'title': '–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –∏ –æ—Ç–ø—É—Å–∫–∞',
                'content': '–†–∞–±–æ—á–∞—è –Ω–µ–¥–µ–ª—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 —á–∞—Å–æ–≤. –†–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å 9:00 –¥–æ 18:00 —Å –æ–±–µ–¥–µ–Ω–Ω—ã–º –ø–µ—Ä–µ—Ä—ã–≤–æ–º —Å 13:00 –¥–æ 14:00. –ï–∂–µ–≥–æ–¥–Ω—ã–π –æ–ø–ª–∞—á–∏–≤–∞–µ–º—ã–π –æ—Ç–ø—É—Å–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 28 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –∑–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏.',
                'filename': 'work_schedule.pdf'
            },
            {
                'title': '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
                'content': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ –¥–æ 3 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º. –î–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ñ–∏—Å–µ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º –∏ –ø—è—Ç–Ω–∏—Ü–∞–º –¥–ª—è –ø–ª–∞–Ω–µ—Ä–æ–∫.',
                'filename': 'remote_work.pdf'
            },
            {
                'title': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ª—å–≥–æ—Ç—ã',
                'content': '–ö–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–æ 20000 —Ä—É–±–ª–µ–π –≤ –≥–æ–¥, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ. –¢–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.',
                'filename': 'benefits.pdf'
            }
        ]
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —á–∞–Ω–∫–∏
        for doc_data in test_documents:
            logger.info(f"–°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {doc_data['title']}")
            
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            embedding = embeddings_model.encode(doc_data['content']).tolist()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            insert_doc_query = text("""
                INSERT INTO documents (title, content, filename, original_filename, file_path, file_size, file_type, processing_status, uploaded_by)
                VALUES (:title, :content, :filename, :original_filename, :file_path, :file_size, :file_type, :processing_status, :uploaded_by)
                RETURNING id;
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            admin_query = text("INSERT INTO admins (user_id, username, is_active) VALUES (1, 'system', true) ON CONFLICT (user_id) DO NOTHING;")
            db_session.execute(admin_query)
            db_session.commit()
            
            result = db_session.execute(insert_doc_query, {
                'title': doc_data['title'],
                'content': doc_data['content'],
                'filename': doc_data['filename'],
                'original_filename': doc_data['filename'],
                'file_path': f"/uploads/{doc_data['filename']}",
                'file_size': len(doc_data['content']),
                'file_type': 'pdf',
                'processing_status': 'completed',
                'uploaded_by': 1
            })
            
            document_id = result.fetchone()[0]
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {document_id}")
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º
            embedding_str = '[' + ','.join(map(str, embedding)) + ']'
            
            insert_chunk_query = text("""
                INSERT INTO document_chunks (document_id, content, chunk_index, embedding)
                VALUES (:document_id, :content, :chunk_index, :embedding::vector);
            """)
            
            db_session.execute(insert_chunk_query, {
                'document_id': document_id,
                'content': doc_data['content'],
                'chunk_index': 0,
                'embedding': embedding_str
            })
            
            logger.info(f"–ß–∞–Ω–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}")
        
        db_session.commit()
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        doc_count = db_session.execute(text("SELECT COUNT(*) FROM documents")).fetchone()[0]
        chunk_count = db_session.execute(text("SELECT COUNT(*) FROM document_chunks")).fetchone()[0]
        
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunk_count}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        db_session.rollback()
        raise
    finally:
        db_session.close()

if __name__ == "__main__":
    create_test_documents() 