#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è API –∫–ª—é—á–∞ GigaChat
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

import sys
import os
import time
import json
import logging
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv
import requests
import uuid

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
project_root = Path(__file__).parent.parent.parent
env_path = project_root / '.env'
load_dotenv(env_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('gigachat_monitor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GigaChatMonitor:
    def __init__(self):
        self.api_key = os.getenv("GIGACHAT_API_KEY")
        self.status_file = "gigachat_status.json"
        self.check_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.scopes = ["GIGACHAT_API_PERS", "GIGACHAT_API_B2B", "GIGACHAT_API_CORP"]
        
    def load_status(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.status_file):
                with open(self.status_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        return {
            "last_check": None,
            "status": "unknown",
            "working_scope": None,
            "error_count": 0,
            "first_error": None,
            "last_success": None
        }
    
    def save_status(self, status):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.status_file, 'w', encoding='utf-8') as f:
                json.dump(status, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def test_api_key(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á —Å–æ –≤—Å–µ–º–∏ scope"""
        if not self.api_key:
            return False, None, "API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        for scope in self.scopes:
            try:
                url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
                
                headers = {
                    "Content-Type": "application/x-www-form-urlencoded",
                    "Accept": "application/json",
                    "RqUID": str(uuid.uuid4()),
                    "Authorization": f"Basic {self.api_key}"
                }
                
                data = {"scope": scope}
                
                response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
                
                if response.status_code == 200:
                    token_data = response.json()
                    if token_data.get("access_token"):
                        return True, scope, "OK"
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è scope {scope}: {e}")
                continue
        
        return False, None, "–í—Å–µ scope –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ API –∫–ª—é—á–∞"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è GigaChat API...")
        
        status = self.load_status()
        current_time = datetime.now().isoformat()
        
        is_working, working_scope, error_msg = self.test_api_key()
        
        if is_working:
            logger.info(f"‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç! Scope: {working_scope}")
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if status["status"] != "working":
                logger.info("üéâ API –∫–ª—é—á –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            
            status.update({
                "last_check": current_time,
                "status": "working",
                "working_scope": working_scope,
                "error_count": 0,
                "first_error": None,
                "last_success": current_time
            })
            
        else:
            logger.error(f"‚ùå API –∫–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {error_msg}")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            status["error_count"] += 1
            
            if status["first_error"] is None:
                status["first_error"] = current_time
                logger.warning("üö® –ü–µ—Ä–≤–∞—è –æ—à–∏–±–∫–∞ API –∫–ª—é—á–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!")
            
            status.update({
                "last_check": current_time,
                "status": "error",
                "working_scope": None
            })
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if status["error_count"] == 1:
                self.send_alert("üö® GigaChat API –∫–ª—é—á –ø–µ—Ä–µ—Å—Ç–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å!")
            elif status["error_count"] % 12 == 0:  # –ö–∞–∂–¥—ã–π —á–∞—Å (12 * 5 –º–∏–Ω—É—Ç)
                hours = status["error_count"] * 5 // 60
                self.send_alert(f"‚ö†Ô∏è GigaChat API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–∂–µ {hours} —á–∞—Å–æ–≤!")
        
        self.save_status(status)
        return is_working, status
    
    def send_alert(self, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è Telegram/email)"""
        logger.critical(f"üö® ALERT: {message}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram –∏–ª–∏ email
        alert_data = {
            "timestamp": datetime.now().isoformat(),
            "message": message,
            "api_key_preview": self.api_key[:20] + "..." if self.api_key else "None"
        }
        
        try:
            with open("gigachat_alerts.log", "a", encoding='utf-8') as f:
                f.write(f"{json.dumps(alert_data, ensure_ascii=False)}\n")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    def get_status_report(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        status = self.load_status()
        
        report = {
            "api_key_status": status["status"],
            "last_check": status["last_check"],
            "working_scope": status["working_scope"],
            "error_count": status["error_count"],
            "uptime_info": self._calculate_uptime(status)
        }
        
        return report
    
    def _calculate_uptime(self, status):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–ø—Ä–æ—Å—Ç–æ—è"""
        if not status["last_check"]:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        last_check = datetime.fromisoformat(status["last_check"])
        now = datetime.now()
        
        if status["status"] == "working":
            if status["last_success"]:
                last_success = datetime.fromisoformat(status["last_success"])
                uptime = now - last_success
                return f"–†–∞–±–æ—Ç–∞–µ—Ç {uptime}"
            return "–†–∞–±–æ—Ç–∞–µ—Ç"
        else:
            if status["first_error"]:
                first_error = datetime.fromisoformat(status["first_error"])
                downtime = now - first_error
                return f"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç {downtime}"
            return "–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    
    def run_continuous_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ GigaChat API...")
        logger.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫—É–Ω–¥")
        
        try:
            while True:
                self.check_health()
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

def main():
    monitor = GigaChatMonitor()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "check":
            # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            is_working, status = monitor.check_health()
            print(f"\nüìä –°–¢–ê–¢–£–° API: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if is_working else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
            
        elif command == "status":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            report = monitor.get_status_report()
            print(f"\nüìä –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò GIGACHAT API:")
            print(f"–°—Ç–∞—Ç—É—Å: {report['api_key_status']}")
            print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {report['last_check']}")
            print(f"–†–∞–±–æ—á–∏–π scope: {report['working_scope']}")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫: {report['error_count']}")
            print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã/–ø—Ä–æ—Å—Ç–æ—è: {report['uptime_info']}")
            
        elif command == "monitor":
            # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            monitor.run_continuous_monitoring()
            
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  check   - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
            print("  status  - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
            print("  monitor - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        monitor.check_health()

if __name__ == "__main__":
    main() 