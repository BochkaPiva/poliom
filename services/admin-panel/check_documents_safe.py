#!/usr/bin/env python3
"""
–ë–ï–ó–û–ü–ê–°–ù–´–ô –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å PostgreSQL vector —Ç–∏–ø–∞–º–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from sqlalchemy.orm import sessionmaker
from sqlalchemy import text
from shared.models.database import engine
from shared.models import Document

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def check_documents_safe():
    """–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìã –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        documents = db.query(Document).all()
        
        if not documents:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        print()
        
        for doc in documents:
            print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç ID {doc.id}: {doc.original_filename}")
            print(f"   üìÅ –ü—É—Ç—å: {doc.file_path}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {doc.processing_status}")
            print(f"   üìà –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {doc.file_size} –±–∞–π—Ç")
            print(f"   üóìÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.created_at}")
            
            if doc.processed_at:
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {doc.processed_at}")
            
            if doc.chunks_count:
                print(f"   üì¶ –ß–∞–Ω–∫–æ–≤: {doc.chunks_count}")
            
            if doc.error_message:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {doc.error_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_path = Path(doc.file_path)
            if file_path.exists():
                actual_size = file_path.stat().st_size
                print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ä–∞–∑–º–µ—Ä: {actual_size} –±–∞–π—Ç)")
                if actual_size != doc.file_size:
                    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ë–î!")
            else:
                print(f"   ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {doc.file_path}")
            
            # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ SQL
            try:
                result = db.execute(
                    text("SELECT COUNT(*) as chunk_count FROM document_chunks WHERE document_id = :doc_id"),
                    {"doc_id": doc.id}
                )
                actual_chunks = result.fetchone()[0]
                
                if actual_chunks > 0:
                    print(f"   üì¶ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ —á–∞–Ω–∫–æ–≤ –≤ –ë–î: {actual_chunks}")
                    if doc.chunks_count != actual_chunks:
                        print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ SQL
                    stats_result = db.execute(
                        text("""
                        SELECT 
                            MIN(content_length) as min_size,
                            MAX(content_length) as max_size,
                            ROUND(AVG(content_length)) as avg_size
                        FROM document_chunks 
                        WHERE document_id = :doc_id
                        """),
                        {"doc_id": doc.id}
                    )
                    stats = stats_result.fetchone()
                    if stats:
                        print(f"   üìè –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤: –º–∏–Ω={stats[0]}, –º–∞–∫—Å={stats[1]}, —Å—Ä–µ–¥–Ω–∏–π={stats[2]}")
                else:
                    print(f"   üì¶ –ß–∞–Ω–∫–∏ –≤ –ë–î: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞–Ω–∫–æ–≤: {str(e)}")
            
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("=" * 60)
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        
        statuses = {}
        total_chunks = 0
        total_size = 0
        
        for doc in documents:
            status = doc.processing_status
            statuses[status] = statuses.get(status, 0) + 1
            
            if doc.chunks_count:
                total_chunks += doc.chunks_count
            
            if doc.file_size:
                total_size += doc.file_size
        
        print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        print(f"üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {total_chunks}")
        print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:,} –±–∞–π—Ç ({total_size/1024/1024:.2f} –ú–ë)")
        print()
        
        print("üìä –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for status, count in statuses.items():
            print(f"   {status}: {count}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ SQL
        try:
            print("\nüìà –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê (—á–µ—Ä–µ–∑ SQL):")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
            total_chunks_sql = db.execute(text("SELECT COUNT(*) FROM document_chunks")).fetchone()[0]
            print(f"   üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤ –≤ –ë–î: {total_chunks_sql}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
            chunk_stats = db.execute(text("""
                SELECT 
                    MIN(content_length) as min_size,
                    MAX(content_length) as max_size,
                    ROUND(AVG(content_length)) as avg_size,
                    SUM(content_length) as total_size
                FROM document_chunks
            """)).fetchone()
            
            if chunk_stats and chunk_stats[0] is not None:
                print(f"   üìè –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤: –º–∏–Ω={chunk_stats[0]}, –º–∞–∫—Å={chunk_stats[1]}, —Å—Ä–µ–¥–Ω–∏–π={chunk_stats[2]}")
                print(f"   üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {chunk_stats[3]:,} —Å–∏–º–≤–æ–ª–æ–≤")
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")
    
    finally:
        db.close()

def check_specific_document_safe(document_id: int):
    """–ë–ï–ó–û–ü–ê–°–ù–ê–Ø –¥–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print(f"üîç –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê ID {document_id}")
    print("=" * 60)
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = db.query(Document).filter(Document.id == document_id).first()
        
        if not document:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document.original_filename}")
        print(f"üìÅ –ü—É—Ç—å: {document.file_path}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {document.processing_status}")
        print(f"üìà –†–∞–∑–º–µ—Ä: {document.file_size} –±–∞–π—Ç")
        print(f"üóìÔ∏è –°–æ–∑–¥–∞–Ω: {document.created_at}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω: {document.updated_at}")
        
        if document.processed_at:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {document.processed_at}")
        
        if document.error_message:
            print(f"‚ùå –û—à–∏–±–∫–∞: {document.error_message}")
        
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        file_path = Path(document.file_path)
        print("üìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê:")
        if file_path.exists():
            stat = file_path.stat()
            print(f"   ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"   üìà –†–∞–∑–º–µ—Ä: {stat.st_size} –±–∞–π—Ç")
            print(f"   üóìÔ∏è –ò–∑–º–µ–Ω–µ–Ω: {stat.st_mtime}")
        else:
            print(f"   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print()
        
        # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞–Ω–∫–æ–≤ —á–µ—Ä–µ–∑ SQL
        print(f"üì¶ –ü–†–û–í–ï–†–ö–ê –ß–ê–ù–ö–û–í:")
        try:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
            chunk_count = db.execute(
                text("SELECT COUNT(*) FROM document_chunks WHERE document_id = :doc_id"),
                {"doc_id": document_id}
            ).fetchone()[0]
            
            print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {chunk_count}")
            
            if chunk_count > 0:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
                stats = db.execute(text("""
                    SELECT 
                        MIN(content_length) as min_size,
                        MAX(content_length) as max_size,
                        ROUND(AVG(content_length)) as avg_size
                    FROM document_chunks 
                    WHERE document_id = :doc_id
                """), {"doc_id": document_id}).fetchone()
                
                if stats:
                    print(f"   üìè –†–∞–∑–º–µ—Ä—ã: –º–∏–Ω={stats[0]}, –º–∞–∫—Å={stats[1]}, —Å—Ä–µ–¥–Ω–∏–π={stats[2]}")
                
                # –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤)
                chunks_preview = db.execute(text("""
                    SELECT chunk_index, content_length, LEFT(content, 100) as preview
                    FROM document_chunks 
                    WHERE document_id = :doc_id 
                    ORDER BY chunk_index 
                    LIMIT 3
                """), {"doc_id": document_id}).fetchall()
                
                print(f"   üìã –ü–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞:")
                for chunk in chunks_preview:
                    preview = chunk[2].replace('\n', ' ')
                    print(f"      {chunk[0]+1}. [{chunk[1]} —Å–∏–º–≤–æ–ª–æ–≤] {preview}...")
            else:
                print(f"   üì¶ –ß–∞–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞–Ω–∫–æ–≤: {str(e)}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")
    
    finally:
        db.close()

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--doc-id", type=int, help="ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    args = parser.parse_args()
    
    if args.doc_id:
        check_specific_document_safe(args.doc_id)
    else:
        check_documents_safe() 