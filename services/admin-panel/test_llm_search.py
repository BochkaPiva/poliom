#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —Å LLM
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv(Path(__file__).parent.parent.parent / ".env")

from shared.utils.search_service import SearchService

def test_llm_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    print("ü§ñ –¢–ï–°–¢ –ü–û–ò–°–ö–ê –° LLM –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞
    search_service = SearchService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É?",
        "–ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏?",
        "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –≤—Ä–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞?"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìã –¢–ï–°–¢ {i}/{len(test_queries)}:")
        print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
        print("-" * 60)
        
        try:
            result = search_service.search(query, max_results=5, min_similarity=0.5)
            
            print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞: {result['quality']}")
            print(f"üìà –õ—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {result['best_similarity']:.3f}")
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result['results'])}")
            print(f"\nüí¨ –û–¢–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ù–´–ô –û–¢–í–ï–¢:")
            print(result['formatted_answer'])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 60)

def test_context_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print("\nüîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –° –ö–û–ù–¢–ï–ö–°–¢–û–ú")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞
    search_service = SearchService()
    
    query = "–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É"
    print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
    print("-" * 60)
    
    try:
        result = search_service.search_with_context(query, context_size=2)
        
        print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality']}")
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ: {len(result['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        if 'context_chunks' in result:
            print(f"üß© –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤: {len(result['context_chunks'])}")
        
        print(f"\nüí¨ –û–¢–í–ï–¢ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú:")
        print(result['formatted_answer'])
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ GigaChat
    gigachat_key = os.getenv('GIGACHAT_API_KEY')
    if gigachat_key:
        print("‚úÖ GigaChat API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è LLM —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print("‚ö†Ô∏è GigaChat API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    try:
        test_llm_search()
        test_context_search()
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("üìà –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 