#!/usr/bin/env python3
"""
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –∫–∞–∫ —Å LLM, —Ç–∞–∫ –∏ —Å fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

import sys
import os
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv(Path(__file__).parent.parent.parent / ".env")

from shared.utils.search_service import SearchService

def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("üîç" + "=" * 58 + "üîç")
    print("üöÄ        –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–û–ò–°–ö–ê POLIOM        üöÄ")
    print("üîç" + "=" * 58 + "üîç")
    print()

def print_section(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'üéØ ' + title + ' üéØ':^60}")
    print("‚îÄ" * 60)

def print_query_result(query, result, query_num, total_queries):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    print(f"\nüìã –ó–ê–ü–†–û–° {query_num}/{total_queries}")
    print(f"‚ùì –í–æ–ø—Ä–æ—Å: \"{query}\"")
    print("‚îÄ" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞: {result['search_quality'].upper()}")
    print(f"üìà –õ—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {result['best_similarity']:.1%}")
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result['results'])}")
    
    if result['results']:
        best = result['results'][0]
        print(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫: {best['document_name']}")
        print(f"üß© –§—Ä–∞–≥–º–µ–Ω—Ç: #{best['chunk_index']}")
    
    print("\nüí¨ –û–¢–í–ï–¢ –°–ò–°–¢–ï–ú–´:")
    print("‚îå" + "‚îÄ" * 48 + "‚îê")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    answer_lines = result['formatted_answer'].split('\n')
    for line in answer_lines:
        if len(line) <= 46:
            print(f"‚îÇ {line:<46} ‚îÇ")
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            words = line.split(' ')
            current_line = ""
            for word in words:
                if len(current_line + word) <= 46:
                    current_line += word + " "
                else:
                    if current_line:
                        print(f"‚îÇ {current_line.strip():<46} ‚îÇ")
                    current_line = word + " "
            if current_line:
                print(f"‚îÇ {current_line.strip():<46} ‚îÇ")
    
    print("‚îî" + "‚îÄ" * 48 + "‚îò")

def demo_search_queries():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print_section("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–õ–ò–ß–ù–´–• –ó–ê–ü–†–û–°–û–í")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞
    search_service = SearchService()
    
    # –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    test_queries = [
        {
            "query": "–°–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É?",
            "description": "–ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"
        },
        {
            "query": "–ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏?",
            "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö"
        },
        {
            "query": "–ö–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä –Ω–∞–¥–±–∞–≤–∫–∏ –∑–∞ –≤—Ä–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞?",
            "description": "–ü–æ–∏—Å–∫ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏"
        },
        {
            "query": "–æ—Ç–ø—É—Å–∫–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"
        },
        {
            "query": "–∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "description": "–ü–æ–∏—Å–∫ –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É"
        }
    ]
    
    print(f"üéØ –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚è±Ô∏è –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    
    results_summary = []
    
    for i, test_case in enumerate(test_queries, 1):
        query = test_case["query"]
        description = test_case["description"]
        
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å {i}/{len(test_queries)}: {description}")
        
        try:
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            result = search_service.search(query, max_results=3, min_similarity=0.3)
            end_time = time.time()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            result['execution_time'] = end_time - start_time
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print_query_result(query, result, i, len(test_queries))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            results_summary.append({
                'query': query,
                'quality': result['search_quality'],
                'similarity': result['best_similarity'],
                'results_count': len(result['results']),
                'execution_time': result['execution_time']
            })
            
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f} —Å–µ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            results_summary.append({
                'query': query,
                'quality': 'error',
                'similarity': 0,
                'results_count': 0,
                'execution_time': 0
            })
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        if i < len(test_queries):
            time.sleep(0.5)
    
    return results_summary

def demo_context_search():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    print_section("–ü–û–ò–°–ö –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –ö–û–ù–¢–ï–ö–°–¢–û–ú")
    
    search_service = SearchService()
    
    query = "–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É"
    print(f"üîç –ó–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: \"{query}\"")
    print("üìù –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏ –¥–æ–±–∞–≤–∏—Ç —Å–æ—Å–µ–¥–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã –∫–∞—Ä—Ç–∏–Ω—ã")
    
    try:
        result = search_service.search_with_context(query, context_size=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {result['search_quality'].upper()}")
        print(f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result['results'])}")
        
        if 'context_chunks' in result:
            print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(result['context_chunks'])}")
        
        print(f"\nüí¨ –û–¢–í–ï–¢ –° –ö–û–ù–¢–ï–ö–°–¢–û–ú:")
        print("‚îå" + "‚îÄ" * 58 + "‚îê")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        context_lines = result['formatted_answer'].split('\n')
        for line in context_lines:
            if len(line) <= 56:
                print(f"‚îÇ {line:<56} ‚îÇ")
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                words = line.split(' ')
                current_line = ""
                for word in words:
                    if len(current_line + word) <= 56:
                        current_line += word + " "
                    else:
                        if current_line:
                            print(f"‚îÇ {current_line.strip():<56} ‚îÇ")
                        current_line = word + " "
                if current_line:
                    print(f"‚îÇ {current_line.strip():<56} ‚îÇ")
        
        print("‚îî" + "‚îÄ" * 58 + "‚îò")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º: {e}")

def print_summary(results_summary):
    """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    print_section("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    if not results_summary:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_queries = len(results_summary)
    successful_queries = len([r for r in results_summary if r['quality'] != 'error'])
    avg_similarity = sum(r['similarity'] for r in results_summary) / total_queries if total_queries > 0 else 0
    avg_time = sum(r['execution_time'] for r in results_summary) / total_queries if total_queries > 0 else 0
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    quality_counts = {}
    for result in results_summary:
        quality = result['quality']
        quality_counts[quality] = quality_counts.get(quality, 0) + 1
    
    print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
    print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful_queries}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ö–æ–∂–µ—Å—Ç—å: {avg_similarity:.1%}")
    print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f} —Å–µ–∫")
    
    print(f"\nüìà –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ö–ê–ß–ï–°–¢–í–£:")
    for quality, count in quality_counts.items():
        percentage = (count / total_queries) * 100
        print(f"   ‚Ä¢ {quality.upper()}: {count} ({percentage:.1f}%)")
    
    print(f"\nüéØ –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ó–ê–ü–†–û–°–ê–ú:")
    for i, result in enumerate(results_summary, 1):
        status = "‚úÖ" if result['quality'] != 'error' else "‚ùå"
        print(f"   {status} –ó–∞–ø—Ä–æ—Å {i}: {result['similarity']:.1%} —Å—Ö–æ–∂–µ—Å—Ç–∏, {result['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å LLM
    gigachat_key = os.getenv('GIGACHAT_API_KEY')
    if gigachat_key:
        print("ü§ñ GigaChat API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("üîÑ –ü—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    else:
        print("‚ö†Ô∏è GigaChat API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üîÑ –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è fallback —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    try:
        # –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
        results = demo_search_queries()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        demo_context_search()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print_summary(results)
        
        print_section("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
        print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìà –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üöÄ –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram-–±–æ—Ç –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 