#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Celery worker
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from celery_app import app
from tasks import process_document

def test_celery_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Celery"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Celery...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å worker'–æ–≤
        inspect = app.control.inspect()
        stats = inspect.stats()
        
        if stats:
            print("‚úÖ Celery worker –∞–∫—Ç–∏–≤–µ–Ω!")
            for worker_name, worker_stats in stats.items():
                print(f"   Worker: {worker_name}")
                print(f"   –ü—É–ª: {worker_stats.get('pool', {}).get('max-concurrency', 'N/A')}")
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_simple_task():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É...")
    print("‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("‚ÑπÔ∏è  –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        registered_tasks = list(app.tasks.keys())
        print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {registered_tasks}")
        
        if 'tasks.process_document' in registered_tasks:
            print("‚úÖ –ó–∞–¥–∞—á–∞ process_document –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ process_document –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_celery_connection():
        print("\n‚ùå Celery worker –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ worker –∫–æ–º–∞–Ω–¥–æ–π: celery -A celery_app worker --loglevel=info")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
    if not test_simple_task():
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –ø—Ä–æ—à–µ–ª")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("‚úÖ Celery –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 