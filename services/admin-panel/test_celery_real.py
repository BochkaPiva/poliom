#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Celery —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–¥–∞—á–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from celery_app import app

def test_celery_ping():
    """–ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥ Celery"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Celery ping...")
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∏–Ω–≥
        result = app.control.ping(timeout=5)
        print(f"üì° Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        if result:
            print("‚úÖ Celery worker –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ ping!")
            return True
        else:
            print("‚ùå Worker –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ping: {e}")
        return False

def test_simple_add_task():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É —Å–ª–æ–∂–µ–Ω–∏—è"""
    print("\n‚ûï –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
        @app.task
        def add(x, y):
            return x + y
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        result = add.delay(4, 4)
        print(f"üì§ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result.id}")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            task_result = result.get(timeout=10)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_result}")
            return task_result == 8
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False

def test_inspect_workers():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö worker'–æ–≤...")
    
    try:
        inspect = app.control.inspect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = inspect.stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        active = inspect.active()
        print(f"üèÉ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {active}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        registered = inspect.registered()
        print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {registered}")
        
        return stats is not None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –†–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ping
    ping_ok = test_celery_ping()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º worker'–æ–≤
    inspect_ok = test_inspect_workers()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
    task_ok = test_simple_add_task()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("="*50)
    print(f"Ping: {'‚úÖ' if ping_ok else '‚ùå'}")
    print(f"–ò–Ω—Å–ø–µ–∫—Ü–∏—è: {'‚úÖ' if inspect_ok else '‚ùå'}")
    print(f"–ó–∞–¥–∞—á–∞: {'‚úÖ' if task_ok else '‚ùå'}")
    
    if all([ping_ok, inspect_ok, task_ok]):
        print("\nüéâ Celery —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return True
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å Celery")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 