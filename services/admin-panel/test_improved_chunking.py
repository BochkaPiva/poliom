#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–∏–Ω–≥–∞
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from shared.utils.document_processor import DocumentProcessor

def test_chunking_algorithm():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —á–∞–Ω–∫–∏–Ω–≥–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–∏–Ω–≥–∞\n")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    processor = DocumentProcessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = """
    –≠—Ç–æ –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    
    –í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ–º—É. –ó–¥–µ—Å—å –º—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–∞–±–æ—Ç—ã.
    
    –¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª–∏. –í–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º—ã –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω.
    
    –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    
    –ü—è—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª. –ó–¥–µ—Å—å –º—ã —É–≥–ª—É–±–ª—è–µ–º—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏.
    
    –®–µ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Ç–µ–º—É. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å–∏—Å—Ç–µ–º—ã.
    
    –°–µ–¥—å–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∞–∂–Ω—ã–µ –Ω—é–∞–Ω—Å—ã. –ö–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —Ä–æ–ª—å.
    
    –í–æ—Å—å–º–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–∏–º–µ—Ä–∞–º.
    """
    
    print(f"üìù –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {test_text[:200]}...\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_cases = [
        {"chunk_size": 200, "overlap": 50, "name": "–ú–∞–ª–µ–Ω—å–∫–∏–µ —á–∞–Ω–∫–∏"},
        {"chunk_size": 500, "overlap": 100, "name": "–°—Ä–µ–¥–Ω–∏–µ —á–∞–Ω–∫–∏"},
        {"chunk_size": 1000, "overlap": 200, "name": "–ë–æ–ª—å—à–∏–µ —á–∞–Ω–∫–∏"},
    ]
    
    for case in test_cases:
        print(f"üîß {case['name']} (—Ä–∞–∑–º–µ—Ä: {case['chunk_size']}, –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {case['overlap']})")
        print("-" * 60)
        
        chunks = processor.split_into_chunks(
            test_text, 
            chunk_size=case['chunk_size'], 
            overlap=case['overlap']
        )
        
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        if chunks:
            chunk_sizes = [len(chunk) for chunk in chunks]
            print(f"üìè –†–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min(chunk_sizes)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max(chunk_sizes)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°—Ä–µ–¥–Ω–∏–π: {sum(chunk_sizes) / len(chunk_sizes):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
            
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
            for i, chunk in enumerate(chunks[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞
                print(f"   –ß–∞–Ω–∫ {i+1}: {chunk[:100]}...")
        
        print("\n" + "="*80 + "\n")

def test_real_document():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
    print("üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ\n")
    
    # –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    doc_path = Path("uploads/20250602_062848_oplata_truda.docx")
    
    if not doc_path.exists():
        print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_path}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = DocumentProcessor()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        print("üìñ –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
        text = processor.extract_text(str(doc_path))
        print(f"‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
        print("‚úÇÔ∏è –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏...")
        chunks = processor.split_into_chunks(text, chunk_size=1000, overlap=200)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        chunk_sizes = [len(chunk) for chunk in chunks]
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞–Ω–∫–æ–≤:")
        print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {min(chunk_sizes)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max(chunk_sizes)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {sum(chunk_sizes) / len(chunk_sizes):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
        for i in range(min(3, len(chunks))):
            print(f"\n--- –ß–∞–Ω–∫ {i+1} ({len(chunks[i])} —Å–∏–º–≤–æ–ª–æ–≤) ---")
            print(chunks[i][:300] + "..." if len(chunks[i]) > 300 else chunks[i])
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —á–∞–Ω–∫–∏–Ω–≥–∞\n")
    
    # –¢–µ—Å—Ç –Ω–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    test_chunking_algorithm()
    
    # –¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
    test_real_document()
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 