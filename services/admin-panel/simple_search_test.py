#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from sqlalchemy.orm import sessionmaker
from sqlalchemy import text
from shared.models.database import engine
from shared.models import Document, DocumentChunk
from shared.utils.embeddings import EmbeddingService

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def test_simple_search():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print("üîç –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞\n")
    
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —á–∞–Ω–∫–æ–≤
        doc_count = db.query(Document).filter(Document.processing_status == 'completed').count()
        chunk_count = db.query(DocumentChunk).count()
        
        print(f"üìö –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {doc_count}")
        print(f"üìÑ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {chunk_count}")
        
        if chunk_count == 0:
            print("‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("\nüß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
        embedding_service = EmbeddingService()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º"
        print(f"\nüîç –ü–æ–∏—Å–∫: '{query}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = embedding_service.get_embedding(query)
        print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(query_embedding)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ - –ø–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        print("\nüìä –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (ID=2)
        chunks = db.query(DocumentChunk).filter(DocumentChunk.document_id == 2).limit(5).all()
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '–û —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ.docx':")
        print()
        
        for i, chunk in enumerate(chunks, 1):
            print(f"üìÑ –ß–∞–Ω–∫ {i} (ID: {chunk.id}):")
            print(f"   –†–∞–∑–º–µ—Ä: {chunk.content_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {chunk.content[:150]}...")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        embeddings_with_data = [chunk for chunk in chunks if chunk.embedding is not None]
        print(f"üß† –ß–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏: {len(embeddings_with_data)}/{len(chunks)}")
        
        if embeddings_with_data:
            first_embedding = embeddings_with_data[0].embedding
            print(f"üìä –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {len(first_embedding)}")
            print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

def test_document_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*80)
    print("üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("="*80)
    
    db = SessionLocal()
    try:
        documents = db.query(Document).filter(Document.processing_status == 'completed').all()
        
        for doc in documents:
            print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç: {doc.original_filename}")
            print(f"   ID: {doc.id}")
            print(f"   –ß–∞–Ω–∫–æ–≤: {doc.chunks_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            sample_chunks = db.query(DocumentChunk).filter(
                DocumentChunk.document_id == doc.id
            ).limit(3).all()
            
            print(f"   –ü—Ä–∏–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤:")
            for chunk in sample_chunks:
                print(f"     –ß–∞–Ω–∫ {chunk.chunk_index + 1}: {chunk.content[:100]}...")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞\n")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
    test_simple_search()
    
    # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
    test_document_content()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("‚úÖ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç '–û —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ.docx' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    print("‚úÖ –°–æ–∑–¥–∞–Ω–æ 26 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º")
    print("‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    print("‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º —á–∞–Ω–∫–∏–Ω–≥–∞")

if __name__ == "__main__":
    main() 