#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –±–µ–∑ LLM –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv(Path(__file__).parent.parent.parent / ".env")

from shared.utils.embedding_service import EmbeddingService
from shared.models.database import SessionLocal, DocumentChunk, Document
import numpy as np

def test_basic_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ LLM"""
    print("üîç –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    embedding_service = EmbeddingService()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ—á–Ω—É—é —Ä–∞–±–æ—Ç—É",
        "–æ–ø–ª–∞—Ç–∞ –≤ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏",
        "–≤—Ä–µ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Ç—Ä—É–¥–∞"
    ]
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìã –¢–ï–°–¢ {i}/{len(test_queries)}:")
        print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
        print("-" * 60)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            query_embedding = embedding_service.create_embedding(query)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = perform_search(query_embedding, max_results=3)
            
            if results:
                print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
                print(f"üìà –õ—É—á—à–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: {results[0]['similarity']:.3f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                best_result = results[0]
                print(f"\nüí¨ –õ–£–ß–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç: {best_result['document_name']}")
                print(f"üß© –§—Ä–∞–≥–º–µ–Ω—Ç #{best_result['chunk_index']}")
                print(f"üìä –°—Ö–æ–∂–µ—Å—Ç—å: {best_result['similarity']:.3f}")
                print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤
                content = best_result['content']
                if len(content) > 300:
                    content = content[:300] + "..."
                print(f'"{content}"')
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                extract_key_data(best_result['content'])
                
            else:
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 60)

def perform_search(query_embedding, max_results=5, min_similarity=0.3):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º"""
    session = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        chunks = session.query(DocumentChunk).join(Document).filter(
            DocumentChunk.embedding.isnot(None)
        ).all()
        
        if not chunks:
            return []
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        similarities = []
        query_embedding_np = np.array(query_embedding)
        
        for chunk in chunks:
            try:
                chunk_embedding = np.array(chunk.embedding)
                
                # –ö–æ—Å–∏–Ω—É—Å–Ω–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å
                similarity = np.dot(query_embedding_np, chunk_embedding) / (
                    np.linalg.norm(query_embedding_np) * np.linalg.norm(chunk_embedding)
                )
                
                if similarity >= min_similarity:
                    similarities.append({
                        'chunk_id': chunk.id,
                        'content': chunk.content,
                        'similarity': float(similarity),
                        'document_name': chunk.document.original_filename,
                        'document_id': chunk.document.id,
                        'chunk_index': chunk.chunk_index,
                        'content_length': chunk.content_length
                    })
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {chunk.id}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarities.sort(key=lambda x: x['similarity'], reverse=True)
        
        return similarities[:max_results]
        
    finally:
        session.close()

def extract_key_data(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    import re
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    percentages = re.findall(r'(\d+(?:\.\d+)?)\s*(?:–ø—Ä–æ—Ü–µ–Ω—Ç|%)', content, re.IGNORECASE)
    if percentages:
        print(f"üí∞ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: {', '.join(percentages)}%")
    
    # –ò—â–µ–º —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö
    amounts = re.findall(r'(\d+(?:\s*\d+)*)\s*(?:—Ä—É–±–ª|—Ä—É–±)', content, re.IGNORECASE)
    if amounts:
        print(f"üíµ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É–º–º—ã: {', '.join(amounts)} —Ä—É–±.")
    
    # –ò—â–µ–º –≤—Ä–µ–º—è
    times = re.findall(r'(\d+)\s*—á–∞—Å', content, re.IGNORECASE)
    if times:
        print(f"‚è∞ –ù–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {', '.join(times)} —á–∞—Å.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–û–ò–°–ö–ê")
    print("–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–∏—Å–∫–∞ –±–µ–∑ LLM")
    print()
    
    try:
        test_basic_search()
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("üìà –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 