#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ process_document
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from celery_app import app
from tasks import process_document

def test_process_document_task():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É process_document"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É process_document...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
        inspect = app.control.inspect()
        registered = inspect.registered()
        
        worker_tasks = []
        for worker, tasks in registered.items():
            worker_tasks.extend(tasks)
            print(f"üë∑ Worker {worker}: {len(tasks)} –∑–∞–¥–∞—á")
        
        if 'tasks.process_document' in worker_tasks:
            print("‚úÖ –ó–∞–¥–∞—á–∞ process_document –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ worker")
        else:
            print("‚ùå –ó–∞–¥–∞—á–∞ process_document –ù–ï –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–Ω–æ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º ID)
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")
        result = process_document.delay(999999)  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {result.id}")
        print("‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)...")
        
        try:
            task_result = result.get(timeout=15)
            print(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {task_result}")
            
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É "–¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            if isinstance(task_result, dict) and task_result.get('status') == 'error':
                print("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–µ–º–∞)")
                return True
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏ Celery\n")
    
    success = test_process_document_task()
    
    print("\n" + "="*50)
    if success:
        print("üéâ Celery –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("‚úÖ Worker –∑–∞–ø—É—â–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–¥–∞—á–∞–º–∏")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 