#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫ –ø–æ –Ω–∏–º
"""

import os
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ services
services_path = Path(__file__).parent.parent
sys.path.append(str(services_path))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv('.env.local')

from sqlalchemy.orm import sessionmaker
from shared.models.database import engine
from shared.models import Document, DocumentChunk
from shared.utils.embeddings import EmbeddingService

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

def check_documents():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ"""
    print("üìö –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n")
    
    db = SessionLocal()
    try:
        documents = db.query(Document).all()
        
        if not documents:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –Ω–µ—Ç")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        print("="*60)
        
        for doc in documents:
            print(f"üìÑ ID: {doc.id}")
            print(f"   –§–∞–π–ª: {doc.original_filename}")
            print(f"   –°—Ç–∞—Ç—É—Å: {doc.processing_status}")
            print(f"   –ß–∞–Ω–∫–æ–≤: {doc.chunks_count or 0}")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω: {doc.created_at}")
            if doc.processed_at:
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω: {doc.processed_at}")
            if doc.error_message:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {doc.error_message}")
            print("-" * 40)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False
    finally:
        db.close()

def check_chunks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("\nüß© –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞–Ω–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n")
    
    db = SessionLocal()
    try:
        chunks = db.query(DocumentChunk).all()
        
        if not chunks:
            print("‚ùå –ß–∞–Ω–∫–æ–≤ –≤ –±–∞–∑–µ –Ω–µ—Ç")
            return False
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        chunks_by_doc = {}
        for chunk in chunks:
            if chunk.document_id not in chunks_by_doc:
                chunks_by_doc[chunk.document_id] = []
            chunks_by_doc[chunk.document_id].append(chunk)
        
        print("="*60)
        for doc_id, doc_chunks in chunks_by_doc.items():
            document = db.query(Document).filter(Document.id == doc_id).first()
            print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document.original_filename if document else f'ID {doc_id}'}")
            print(f"   –ß–∞–Ω–∫–æ–≤: {len(doc_chunks)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞–Ω–∫–∞
            for i, chunk in enumerate(doc_chunks[:3]):
                print(f"   üß© –ß–∞–Ω–∫ {chunk.chunk_index}: {len(chunk.content)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"      –¢–µ–∫—Å—Ç: {chunk.content[:100]}...")
                print(f"      –≠–º–±–µ–¥–¥–∏–Ω–≥: {'‚úÖ' if chunk.embedding else '‚ùå'}")
            
            if len(doc_chunks) > 3:
                print(f"   ... –∏ –µ—â–µ {len(doc_chunks) - 3} —á–∞–Ω–∫–æ–≤")
            print("-" * 40)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∞–Ω–∫–æ–≤: {e}")
        return False
    finally:
        db.close()

def test_search(query: str, top_k: int = 5):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'\n")
    
    db = SessionLocal()
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        embedding_service = EmbeddingService()
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        query_embedding = embedding_service.get_embedding(query)
        if not query_embedding:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        chunks = db.query(DocumentChunk).filter(DocumentChunk.embedding.isnot(None)).all()
        
        if not chunks:
            print("‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
            return False
        
        print(f"üìä –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ {len(chunks)} —á–∞–Ω–∫–æ–≤...")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
        similarities = []
        for chunk in chunks:
            try:
                similarity = embedding_service.calculate_similarity(query_embedding, chunk.embedding)
                similarities.append((chunk, similarity))
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è —á–∞–Ω–∫–∞ {chunk.id}: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏
        similarities.sort(key=lambda x: x[1], reverse=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüèÜ –¢–æ–ø-{min(top_k, len(similarities))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print("="*60)
        
        for i, (chunk, similarity) in enumerate(similarities[:top_k]):
            document = db.query(Document).filter(Document.id == chunk.document_id).first()
            
            print(f"#{i+1} –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f}")
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {document.original_filename if document else f'ID {chunk.document_id}'}")
            print(f"   üß© –ß–∞–Ω–∫ {chunk.chunk_index}: {len(chunk.content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   üìù –¢–µ–∫—Å—Ç: {chunk.content[:200]}...")
            print("-" * 40)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False
    finally:
        db.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    docs_ok = check_documents()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞–Ω–∫–∏
    chunks_ok = check_chunks()
    
    if docs_ok and chunks_ok:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("\n" + "="*60)
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê")
        print("="*60)
        
        test_queries = [
            "–¥–æ–∫—É–º–µ–Ω—Ç",
            "—Ç–µ–∫—Å—Ç",
            "—Å–∏—Å—Ç–µ–º–∞",
            "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
        ]
        
        for query in test_queries:
            test_search(query, top_k=3)
            print()
    
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò:")
    print("="*60)
    
    if docs_ok and chunks_ok:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        print("‚úÖ –ß–∞–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏")
        print("‚úÖ –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        print("\nüí° –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!")
    else:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        if not docs_ok:
            print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        if not chunks_ok:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —á–∞–Ω–∫–∞–º–∏")

if __name__ == "__main__":
    main() 