#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
–£–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –≤—Å–µ –µ–≥–æ —á–∞–Ω–∫–∏ –∏ —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python delete_document.py <document_id>
    python delete_document.py --list  # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
services_dir = current_dir.parent
sys.path.append(str(services_dir))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(current_dir / '.env.local')

from shared.models.document import Document, DocumentChunk
from shared.models.database import SessionLocal

def list_documents():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    db = SessionLocal()
    try:
        documents = db.query(Document).order_by(Document.id).all()
        
        if not documents:
            print("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üìÑ –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        print("-" * 80)
        print(f"{'ID':<4} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<30} {'–°—Ç–∞—Ç—É—Å':<12} {'–ß–∞–Ω–∫–æ–≤':<8} {'–†–∞–∑–º–µ—Ä':<10}")
        print("-" * 80)
        
        for doc in documents:
            chunks_count = db.query(DocumentChunk).filter(DocumentChunk.document_id == doc.id).count()
            size_mb = doc.file_size / (1024 * 1024) if doc.file_size else 0
            
            print(f"{doc.id:<4} {doc.title[:29]:<30} {doc.processing_status:<12} {chunks_count:<8} {size_mb:.1f}MB")
        
        print("-" * 80)
        print(f"–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
    finally:
        db.close()

def delete_document_safe(document_id):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        document = db.query(Document).filter(Document.id == document_id).first()
        if not document:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID {document_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document.title}")
        print(f"   –§–∞–π–ª: {document.original_filename}")
        print(f"   –°—Ç–∞—Ç—É—Å: {document.processing_status}")
        print(f"   –ü—É—Ç—å: {document.file_path}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫–∏
        chunks_count = db.query(DocumentChunk).filter(DocumentChunk.document_id == document_id).count()
        print(f"   –ß–∞–Ω–∫–æ–≤: {chunks_count}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm = input(f"\n‚ö†Ô∏è  –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç '{document.title}'? (y/N): ")
        if confirm.lower() != 'y':
            print("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        
        print("\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ...")
        
        # 1. –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫–∏ —á–µ—Ä–µ–∑ SQL (–∏–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏)
        try:
            result = db.execute(text("DELETE FROM document_chunks WHERE document_id = :doc_id"), {"doc_id": document_id})
            deleted_chunks = result.rowcount
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {deleted_chunks}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")
        
        # 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        try:
            file_path = Path(document.file_path)
            if file_path.exists():
                file_path.unlink()
                print(f"‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {document.file_path}")
            else:
                print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {document.file_path}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        
        # 3. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞
        try:
            db.delete(document)
            db.commit()
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –ë–î: {e}")
            db.rollback()
            return False
        
        print(f"\nüéâ –î–æ–∫—É–º–µ–Ω—Ç {document_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python delete_document.py <document_id>  # —É–¥–∞–ª–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
        print("  python delete_document.py --list         # –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        sys.exit(1)
    
    arg = sys.argv[1]
    
    if arg == "--list" or arg == "-l":
        list_documents()
    else:
        try:
            document_id = int(arg)
            delete_document_safe(document_id)
        except ValueError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–∫—É–º–µ–Ω—Ç–∞: {arg}")
            sys.exit(1)

if __name__ == "__main__":
    main() 