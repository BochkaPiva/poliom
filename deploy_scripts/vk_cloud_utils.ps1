# POLIOM HR Assistant - VK Cloud Utilities
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("status", "logs", "scale", "restart", "backup", "restore", "cleanup", "monitor", "update")]
    [string]$Action,
    
    [string]$Component = "all",
    [int]$Replicas = 3,
    [string]$BackupName = "",
    [string]$LogTail = "100"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
function Write-Info { param([string]$Message); Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue }
function Write-Success { param([string]$Message); Write-Host "‚úÖ $Message" -ForegroundColor Green }
function Write-Warning { param([string]$Message); Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
function Write-ErrorMsg { param([string]$Message); Write-Host "‚ùå $Message" -ForegroundColor Red }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
function Get-DeploymentStatus {
    Write-Info "üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è POLIOM HR Assistant"
    Write-Host "=" * 50 -ForegroundColor Cyan
    
    Write-Info "Namespace:"
    kubectl get namespace poliom-hr
    
    Write-Info "Pods:"
    kubectl get pods -n poliom-hr -o wide
    
    Write-Info "Services:"
    kubectl get services -n poliom-hr
    
    Write-Info "Ingress:"
    kubectl get ingress -n poliom-hr
    
    Write-Info "ConfigMaps:"
    kubectl get configmaps -n poliom-hr
    
    Write-Info "Secrets:"
    kubectl get secrets -n poliom-hr
    
    Write-Info "PersistentVolumes:"
    kubectl get pv,pvc -n poliom-hr
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–æ–≤
    Write-Info "–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤:"
    $pods = kubectl get pods -n poliom-hr -o json | ConvertFrom-Json
    foreach ($pod in $pods.items) {
        $name = $pod.metadata.name
        $status = $pod.status.phase
        $ready = ($pod.status.containerStatuses | Where-Object { $_.ready -eq $true }).Count
        $total = $pod.status.containerStatuses.Count
        
        $statusColor = switch ($status) {
            "Running" { "Green" }
            "Pending" { "Yellow" }
            "Failed" { "Red" }
            default { "White" }
        }
        
        Write-Host "  üì¶ $name`: $status ($ready/$total ready)" -ForegroundColor $statusColor
    }
}

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
function Get-Logs {
    param([string]$ComponentFilter = "all")
    
    Write-Info "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    
    if ($ComponentFilter -eq "all") {
        $components = @("backend", "frontend", "redis")
    } else {
        $components = @($ComponentFilter)
    }
    
    foreach ($component in $components) {
        Write-Info "–õ–æ–≥–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: $component"
        Write-Host "-" * 30 -ForegroundColor Gray
        
        try {
            kubectl logs -n poliom-hr -l app=poliom-$component --tail=$LogTail
        } catch {
            Write-Warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –¥–ª—è $component"
        }
        
        Write-Host ""
    }
}

# –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
function Set-Scale {
    param(
        [string]$ComponentName,
        [int]$ReplicaCount
    )
    
    Write-Info "üîÑ –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ $ComponentName –¥–æ $ReplicaCount —Ä–µ–ø–ª–∏–∫"
    
    try {
        kubectl scale deployment $ComponentName -n poliom-hr --replicas=$ReplicaCount
        Write-Success "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        kubectl rollout status deployment/$ComponentName -n poliom-hr
        
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: $_"
    }
}

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
function Restart-Components {
    param([string]$ComponentFilter = "all")
    
    Write-Info "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
    
    if ($ComponentFilter -eq "all") {
        $deployments = kubectl get deployments -n poliom-hr -o name
    } else {
        $deployments = @("deployment/poliom-$ComponentFilter")
    }
    
    foreach ($deployment in $deployments) {
        Write-Info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: $deployment"
        try {
            kubectl rollout restart $deployment -n poliom-hr
            kubectl rollout status $deployment -n poliom-hr
            Write-Success "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ $deployment –∑–∞–≤–µ—Ä—à–µ–Ω"
        } catch {
            Write-ErrorMsg "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ $deployment`: $_"
        }
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ backup
function New-Backup {
    param([string]$Name)
    
    if (-not $Name) {
        $Name = "poliom-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    }
    
    Write-Info "üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup: $Name"
    
    try {
        # Backup —Å –ø–æ–º–æ—â—å—é Velero (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        if (Get-Command velero -ErrorAction SilentlyContinue) {
            velero backup create $Name --include-namespaces poliom-hr
            Write-Success "Backup —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é Velero"
        } else {
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —ç–∫—Å–ø–æ—Ä—Ç YAML
            $backupDir = "backups/$Name"
            New-Item -ItemType Directory -Path $backupDir -Force
            
            # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            $resources = @("deployments", "services", "configmaps", "secrets", "ingress", "pvc")
            foreach ($resource in $resources) {
                kubectl get $resource -n poliom-hr -o yaml > "$backupDir/$resource.yaml"
            }
            
            Write-Success "Backup —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $backupDir"
        }
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backup: $_"
    }
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup
function Restore-Backup {
    param([string]$Name)
    
    Write-Info "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup: $Name"
    
    try {
        if (Get-Command velero -ErrorAction SilentlyContinue) {
            velero restore create "$Name-restore" --from-backup $Name
            Write-Success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é Velero"
        } else {
            $backupDir = "backups/$Name"
            if (Test-Path $backupDir) {
                Get-ChildItem "$backupDir/*.yaml" | ForEach-Object {
                    kubectl apply -f $_.FullName
                }
                Write-Success "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ $backupDir –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            } else {
                Write-ErrorMsg "Backup –Ω–µ –Ω–∞–π–¥–µ–Ω: $backupDir"
            }
        }
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $_"
    }
}

# –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
function Remove-Deployment {
    Write-Warning "‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ POLIOM HR Assistant"
    $confirm = Read-Host "–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'DELETE' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
    
    if ($confirm -eq "DELETE") {
        Write-Info "–£–¥–∞–ª–µ–Ω–∏–µ namespace poliom-hr..."
        kubectl delete namespace poliom-hr
        Write-Success "–†–µ—Å—É—Ä—Å—ã —É–¥–∞–ª–µ–Ω—ã"
    } else {
        Write-Info "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    }
}

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
function Start-Monitoring {
    Write-Info "üìä –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"
    
    while ($true) {
        Clear-Host
        Write-Host "üöÄ POLIOM HR Assistant - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" -ForegroundColor Magenta
        Write-Host "–í—Ä–µ–º—è: $(Get-Date)" -ForegroundColor Gray
        Write-Host "=" * 50 -ForegroundColor Cyan
        
        # CPU –∏ –ø–∞–º—è—Ç—å –ø–æ–¥–æ–≤
        Write-Info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤:"
        kubectl top pods -n poliom-hr --no-headers | ForEach-Object {
            $parts = $_ -split '\s+'
            $podName = $parts[0]
            $cpu = $parts[1]
            $memory = $parts[2]
            Write-Host "  üì¶ $podName`: CPU: $cpu, Memory: $memory" -ForegroundColor White
        }
        
        Write-Host ""
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤
        Write-Info "–°—Ç–∞—Ç—É—Å –ø–æ–¥–æ–≤:"
        kubectl get pods -n poliom-hr --no-headers | ForEach-Object {
            $parts = $_ -split '\s+'
            $podName = $parts[0]
            $ready = $parts[1]
            $status = $parts[2]
            $restarts = $parts[3]
            
            $color = switch ($status) {
                "Running" { "Green" }
                "Pending" { "Yellow" }
                "Error" { "Red" }
                "CrashLoopBackOff" { "Red" }
                default { "White" }
            }
            
            Write-Host "  üîç $podName`: $ready $status (restarts: $restarts)" -ForegroundColor $color
        }
        
        Write-Host ""
        Write-Host "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞..." -ForegroundColor Gray
        Start-Sleep -Seconds 10
    }
}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function Update-Application {
    Write-Info "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ POLIOM HR Assistant"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤
    $updateImages = Read-Host "–û–±–Ω–æ–≤–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã? (y/n)"
    if ($updateImages -eq "y" -or $updateImages -eq "Y") {
        Write-Info "–°–±–æ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker build -t poliom-backend:latest -f backend/Dockerfile .
        docker build -t poliom-frontend:latest -f frontend/Dockerfile .
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ deployments
        kubectl set image deployment/poliom-backend backend=poliom-backend:latest -n poliom-hr
        kubectl set image deployment/poliom-frontend frontend=poliom-frontend:latest -n poliom-hr
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è rollout
        kubectl rollout status deployment/poliom-backend -n poliom-hr
        kubectl rollout status deployment/poliom-frontend -n poliom-hr
        
        Write-Success "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    }
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    $updateConfig = Read-Host "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/n)"
    if ($updateConfig -eq "y" -or $updateConfig -eq "Y") {
        $configFiles = @("k8s/backend-deployment.yaml", "k8s/frontend-deployment.yaml", "k8s/ingress.yaml")
        foreach ($file in $configFiles) {
            if (Test-Path $file) {
                kubectl apply -f $file
                Write-Success "–û–±–Ω–æ–≤–ª–µ–Ω: $file"
            }
        }
    }
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    switch ($Action) {
        "status" { Get-DeploymentStatus }
        "logs" { Get-Logs -ComponentFilter $Component }
        "scale" { 
            if ($Component -eq "all") {
                @("poliom-backend", "poliom-frontend") | ForEach-Object {
                    Set-Scale -ComponentName $_ -ReplicaCount $Replicas
                }
            } else {
                Set-Scale -ComponentName "poliom-$Component" -ReplicaCount $Replicas
            }
        }
        "restart" { Restart-Components -ComponentFilter $Component }
        "backup" { New-Backup -Name $BackupName }
        "restore" { Restore-Backup -Name $BackupName }
        "cleanup" { Remove-Deployment }
        "monitor" { Start-Monitoring }
        "update" { Update-Application }
        default { 
            Write-ErrorMsg "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $Action"
            Write-Info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è: status, logs, scale, restart, backup, restore, cleanup, monitor, update"
        }
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ kubectl
if (!(Get-Command kubectl -ErrorAction SilentlyContinue)) {
    Write-ErrorMsg "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    exit 1
}

# –ó–∞–ø—É—Å–∫
try {
    Main
} catch {
    Write-ErrorMsg "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $_"
    exit 1
} 