#!/bin/bash

# POLIOM HR Assistant - VK Cloud Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ VK Cloud

set -e

echo "üöÄ POLIOM HR Assistant - VK Cloud Deployment"
echo "============================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v kubectl &> /dev/null; then
        print_error "kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    print_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    # –ó–∞–ø—Ä–æ—Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ VK Cloud: " VK_PROJECT_NAME
    read -p "–í–≤–µ–¥–∏—Ç–µ endpoint PostgreSQL: " POSTGRES_HOST
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL: " POSTGRES_USER
    read -s -p "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å PostgreSQL: " POSTGRES_PASSWORD
    echo
    read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: " POSTGRES_DB
    read -p "–í–≤–µ–¥–∏—Ç–µ Access Key –¥–ª—è Object Storage: " S3_ACCESS_KEY
    read -s -p "–í–≤–µ–¥–∏—Ç–µ Secret Key –¥–ª—è Object Storage: " S3_SECRET_KEY
    echo
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è bucket: " S3_BUCKET_NAME
    read -p "–í–≤–µ–¥–∏—Ç–µ endpoint Object Storage: " S3_ENDPOINT
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    export VK_PROJECT_NAME
    export POSTGRES_HOST
    export POSTGRES_USER
    export POSTGRES_PASSWORD
    export POSTGRES_DB
    export S3_ACCESS_KEY
    export S3_SECRET_KEY
    export S3_BUCKET_NAME
    export S3_ENDPOINT
    
    print_success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ namespace
create_namespace() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ namespace poliom-hr..."
    
    kubectl create namespace poliom-hr --dry-run=client -o yaml | kubectl apply -f -
    kubectl config set-context --current --namespace=poliom-hr
    
    print_success "Namespace —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π"
}

# –°–æ–∑–¥–∞–Ω–∏–µ ConfigMap
create_configmap() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ ConfigMap..."
    
    cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: poliom-config
  namespace: poliom-hr
data:
  POSTGRES_HOST: "${POSTGRES_HOST}"
  POSTGRES_DB: "${POSTGRES_DB}"
  POSTGRES_PORT: "5432"
  S3_ENDPOINT: "${S3_ENDPOINT}"
  S3_BUCKET_NAME: "${S3_BUCKET_NAME}"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
EOF

    print_success "ConfigMap —Å–æ–∑–¥–∞–Ω"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Secret
create_secret() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ Secret..."
    
    kubectl create secret generic poliom-secrets \
        --from-literal=POSTGRES_USER="${POSTGRES_USER}" \
        --from-literal=POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
        --from-literal=S3_ACCESS_KEY="${S3_ACCESS_KEY}" \
        --from-literal=S3_SECRET_KEY="${S3_SECRET_KEY}" \
        --from-literal=JWT_SECRET="$(openssl rand -base64 32)" \
        --namespace=poliom-hr \
        --dry-run=client -o yaml | kubectl apply -f -
    
    print_success "Secret —Å–æ–∑–¥–∞–Ω"
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Redis
deploy_redis() {
    print_info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Redis..."
    
    cat <<EOF | kubectl apply -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: poliom-hr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: poliom-hr
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
EOF

    print_success "Redis —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
test_postgres() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ pod –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    kubectl run postgres-test --rm -i --restart=Never --image=postgres:16 -- \
        psql "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}" \
        -c "SELECT version();" -c "SELECT * FROM pg_available_extensions WHERE name = 'vector';"
    
    if [ $? -eq 0 ]; then
        print_success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"
    else
        print_error "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"
        exit 1
    fi
}

# –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–æ–≤
build_images() {
    print_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    # Backend
    print_info "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
    docker build -t poliom-backend:latest -f backend/Dockerfile .
    
    # Frontend
    print_info "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
    docker build -t poliom-frontend:latest -f frontend/Dockerfile .
    
    print_success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
    
    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π registry
    read -p "–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—ã –≤ registry? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "–í–≤–µ–¥–∏—Ç–µ URL registry: " REGISTRY_URL
        docker tag poliom-backend:latest ${REGISTRY_URL}/poliom-backend:latest
        docker tag poliom-frontend:latest ${REGISTRY_URL}/poliom-frontend:latest
        docker push ${REGISTRY_URL}/poliom-backend:latest
        docker push ${REGISTRY_URL}/poliom-frontend:latest
        print_success "–û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ registry"
    fi
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Kubernetes
apply_k8s_configs() {
    print_info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Kubernetes..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if [ -f "k8s/backend-deployment.yaml" ]; then
        kubectl apply -f k8s/backend-deployment.yaml
        print_success "Backend deployment –ø—Ä–∏–º–µ–Ω–µ–Ω"
    else
        print_warning "–§–∞–π–ª k8s/backend-deployment.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "k8s/frontend-deployment.yaml" ]; then
        kubectl apply -f k8s/frontend-deployment.yaml
        print_success "Frontend deployment –ø—Ä–∏–º–µ–Ω–µ–Ω"
    else
        print_warning "–§–∞–π–ª k8s/frontend-deployment.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    if [ -f "k8s/ingress.yaml" ]; then
        kubectl apply -f k8s/ingress.yaml
        print_success "Ingress –ø—Ä–∏–º–µ–Ω–µ–Ω"
    else
        print_warning "–§–∞–π–ª k8s/ingress.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
check_deployment_status() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    print_info "Pods:"
    kubectl get pods -n poliom-hr
    
    print_info "Services:"
    kubectl get services -n poliom-hr
    
    print_info "Ingress:"
    kubectl get ingress -n poliom-hr
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤..."
    kubectl wait --for=condition=ready pod --all -n poliom-hr --timeout=300s
    
    print_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
show_access_info() {
    print_info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
    
    INGRESS_IP=$(kubectl get ingress -n poliom-hr -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "–Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    echo "=================================="
    echo "üåê IP –∞–¥—Ä–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${INGRESS_IP}"
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://${INGRESS_IP}/grafana"
    echo "üîç –õ–æ–≥–∏: kubectl logs -n poliom-hr -l app=poliom-backend"
    echo "‚öôÔ∏è  –°—Ç–∞—Ç—É—Å: kubectl get all -n poliom-hr"
    echo "=================================="
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ POLIOM HR Assistant –Ω–∞ VK Cloud..."
    
    check_dependencies
    setup_environment
    create_namespace
    create_configmap
    create_secret
    deploy_redis
    test_postgres
    
    read -p "–•–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å Docker –æ–±—Ä–∞–∑—ã? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        build_images
    fi
    
    apply_k8s_configs
    check_deployment_status
    show_access_info
    
    print_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'kubectl get all -n poliom-hr' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'print_error "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@" 