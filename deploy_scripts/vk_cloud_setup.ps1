# POLIOM HR Assistant - VK Cloud Deployment Script (PowerShell)
# –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ VK Cloud

param(
    [switch]$SkipImageBuild,
    [switch]$SkipTests,
    [string]$ConfigFile = "",
    [ValidateSet("mvp", "startup", "business", "enterprise")]
    [string]$ConfigSize = "startup"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –≤—ã–≤–æ–¥–∞
function Write-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Blue
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-ErrorMsg {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
function Get-ResourceConfig {
    param([string]$Size)
    
    switch ($Size) {
        "mvp" {
            return @{
                BackendReplicas = 1
                FrontendReplicas = 1
                BackendCPU = "100m"
                BackendMemory = "256Mi"
                BackendCPULimit = "200m"
                BackendMemoryLimit = "512Mi"
                FrontendCPU = "50m"
                FrontendMemory = "128Mi"
                FrontendCPULimit = "100m"
                FrontendMemoryLimit = "256Mi"
                Description = "MVP/–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è (~3,500‚ÇΩ/–º–µ—Å)"
            }
        }
        "startup" {
            return @{
                BackendReplicas = 2
                FrontendReplicas = 1
                BackendCPU = "150m"
                BackendMemory = "384Mi"
                BackendCPULimit = "300m"
                BackendMemoryLimit = "768Mi"
                FrontendCPU = "75m"
                FrontendMemory = "192Mi"
                FrontendCPULimit = "150m"
                FrontendMemoryLimit = "384Mi"
                Description = "–°—Ç–∞—Ä—Ç–∞–ø –≤–µ—Ä—Å–∏—è (~6,500‚ÇΩ/–º–µ—Å)"
            }
        }
        "business" {
            return @{
                BackendReplicas = 2
                FrontendReplicas = 2
                BackendCPU = "250m"
                BackendMemory = "512Mi"
                BackendCPULimit = "500m"
                BackendMemoryLimit = "1Gi"
                FrontendCPU = "100m"
                FrontendMemory = "256Mi"
                FrontendCPULimit = "200m"
                FrontendMemoryLimit = "512Mi"
                Description = "–ë–∏–∑–Ω–µ—Å –≤–µ—Ä—Å–∏—è (~12,000‚ÇΩ/–º–µ—Å)"
            }
        }
        "enterprise" {
            return @{
                BackendReplicas = 3
                FrontendReplicas = 2
                BackendCPU = "250m"
                BackendMemory = "512Mi"
                BackendCPULimit = "500m"
                BackendMemoryLimit = "1Gi"
                FrontendCPU = "100m"
                FrontendMemory = "256Mi"
                FrontendCPULimit = "200m"
                FrontendMemoryLimit = "512Mi"
                Description = "Enterprise –≤–µ—Ä—Å–∏—è (~27,500‚ÇΩ/–º–µ—Å)"
            }
        }
        default {
            return Get-ResourceConfig -Size "startup"
        }
    }
}

# –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Show-ConfigInfo {
    param([string]$Size)
    
    $config = Get-ResourceConfig -Size $Size
    
    Write-Host "üéØ –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $($config.Description)" -ForegroundColor Cyan
    Write-Host "   Backend —Ä–µ–ø–ª–∏–∫–∏: $($config.BackendReplicas)" -ForegroundColor Gray
    Write-Host "   Frontend —Ä–µ–ø–ª–∏–∫–∏: $($config.FrontendReplicas)" -ForegroundColor Gray
    Write-Host "   –†–µ—Å—É—Ä—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏" -ForegroundColor Gray
    Write-Host ""
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å welcome bonus
    $costs = @{
        "mvp" = @{ Monthly = 3500; WithBonus = "–ë–ï–°–ü–õ–ê–¢–ù–û + –æ—Å—Ç–∞—Ç–æ–∫ 1,500‚ÇΩ" }
        "startup" = @{ Monthly = 6500; WithBonus = "1,500‚ÇΩ" }
        "business" = @{ Monthly = 12000; WithBonus = "7,000‚ÇΩ" }
        "enterprise" = @{ Monthly = 27500; WithBonus = "22,500‚ÇΩ" }
    }
    
    $cost = $costs[$Size]
    Write-Host "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:" -ForegroundColor Green
    Write-Host "   –ï–∂–µ–º–µ—Å—è—á–Ω–æ: ~$($cost.Monthly)‚ÇΩ" -ForegroundColor Green
    Write-Host "   –ü–µ—Ä–≤—ã–π –º–µ—Å—è—Ü —Å bonus: $($cost.WithBonus)" -ForegroundColor Green
    Write-Host ""
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function Test-Dependencies {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    $dependencies = @("kubectl", "docker")
    $missing = @()
    
    foreach ($dep in $dependencies) {
        if (!(Get-Command $dep -ErrorAction SilentlyContinue)) {
            $missing += $dep
        }
    }
    
    if ($missing.Count -gt 0) {
        Write-ErrorMsg "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: $($missing -join ', ')"
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
        Write-Info "- kubectl: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
        Write-Info "- Docker Desktop: https://www.docker.com/products/docker-desktop"
        exit 1
    }
    
    Write-Success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function Set-Environment {
    Write-Info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if ($ConfigFile -and (Test-Path $ConfigFile)) {
        Write-Info "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞: $ConfigFile"
        $config = Get-Content $ConfigFile | ConvertFrom-Json
        
        $global:VK_PROJECT_NAME = $config.VK_PROJECT_NAME
        $global:POSTGRES_HOST = $config.POSTGRES_HOST
        $global:POSTGRES_USER = $config.POSTGRES_USER
        $global:POSTGRES_PASSWORD = $config.POSTGRES_PASSWORD
        $global:POSTGRES_DB = $config.POSTGRES_DB
        $global:S3_ACCESS_KEY = $config.S3_ACCESS_KEY
        $global:S3_SECRET_KEY = $config.S3_SECRET_KEY
        $global:S3_BUCKET_NAME = $config.S3_BUCKET_NAME
        $global:S3_ENDPOINT = $config.S3_ENDPOINT
    } else {
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
        $global:VK_PROJECT_NAME = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ VK Cloud"
        $global:POSTGRES_HOST = Read-Host "–í–≤–µ–¥–∏—Ç–µ endpoint PostgreSQL"
        $global:POSTGRES_USER = Read-Host "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è PostgreSQL"
        $global:POSTGRES_PASSWORD = Read-Host "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å PostgreSQL" -AsSecureString | ConvertFrom-SecureString -AsPlainText
        $global:POSTGRES_DB = Read-Host "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
        $global:S3_ACCESS_KEY = Read-Host "–í–≤–µ–¥–∏—Ç–µ Access Key –¥–ª—è Object Storage"
        $global:S3_SECRET_KEY = Read-Host "–í–≤–µ–¥–∏—Ç–µ Secret Key –¥–ª—è Object Storage" -AsSecureString | ConvertFrom-SecureString -AsPlainText
        $global:S3_BUCKET_NAME = Read-Host "–í–≤–µ–¥–∏—Ç–µ –∏–º—è bucket"
        $global:S3_ENDPOINT = Read-Host "–í–≤–µ–¥–∏—Ç–µ endpoint Object Storage"
    }
    
    Write-Success "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ namespace
function New-Namespace {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ namespace poliom-hr..."
    
    try {
        kubectl create namespace poliom-hr --dry-run=client -o yaml | kubectl apply -f -
        kubectl config set-context --current --namespace=poliom-hr
        Write-Success "Namespace —Å–æ–∑–¥–∞–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ —Ç–µ–∫—É—â–∏–π"
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è namespace: $_"
        exit 1
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ ConfigMap
function New-ConfigMap {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ ConfigMap..."
    
    $configMapYaml = @"
apiVersion: v1
kind: ConfigMap
metadata:
  name: poliom-config
  namespace: poliom-hr
data:
  POSTGRES_HOST: "$global:POSTGRES_HOST"
  POSTGRES_DB: "$global:POSTGRES_DB"
  POSTGRES_PORT: "5432"
  S3_ENDPOINT: "$global:S3_ENDPOINT"
  S3_BUCKET_NAME: "$global:S3_BUCKET_NAME"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  ENVIRONMENT: "production"
  LOG_LEVEL: "INFO"
  CONFIG_SIZE: "$ConfigSize"
"@

    $configMapYaml | kubectl apply -f -
    Write-Success "ConfigMap —Å–æ–∑–¥–∞–Ω —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π: $ConfigSize"
}

# –°–æ–∑–¥–∞–Ω–∏–µ Secret
function New-Secret {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ Secret..."
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Å–µ–∫—Ä–µ—Ç–∞
    $jwtSecret = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes((New-Guid).ToString()))
    
    try {
        kubectl create secret generic poliom-secrets `
            --from-literal=POSTGRES_USER="$global:POSTGRES_USER" `
            --from-literal=POSTGRES_PASSWORD="$global:POSTGRES_PASSWORD" `
            --from-literal=S3_ACCESS_KEY="$global:S3_ACCESS_KEY" `
            --from-literal=S3_SECRET_KEY="$global:S3_SECRET_KEY" `
            --from-literal=JWT_SECRET="$jwtSecret" `
            --namespace=poliom-hr `
            --dry-run=client -o yaml | kubectl apply -f -
        
        Write-Success "Secret —Å–æ–∑–¥–∞–Ω"
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Secret: $_"
        exit 1
    }
}

# –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Redis —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏
function Deploy-Redis {
    Write-Info "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Redis..."
    
    $config = Get-ResourceConfig -Size $ConfigSize
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã Redis –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
    $redisMemory = switch ($ConfigSize) {
        "mvp" { "128Mi"; "256Mi" }
        "startup" { "256Mi"; "512Mi" }
        default { "256Mi"; "512Mi" }
    }
    
    $redisYaml = @"
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: poliom-hr
  labels:
    app: redis
    config-size: $ConfigSize
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        resources:
          requests:
            memory: "$($redisMemory[0])"
            cpu: "50m"
          limits:
            memory: "$($redisMemory[1])"
            cpu: "100m"
        command: ["redis-server"]
        args: ["--maxmemory", "$(($redisMemory[0] -replace 'Mi',''))m", "--maxmemory-policy", "allkeys-lru"]
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: poliom-hr
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
"@

    $redisYaml | kubectl apply -f -
    Write-Success "Redis —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
}

# –°–æ–∑–¥–∞–Ω–∏–µ HPA (Horizontal Pod Autoscaler)
function New-HPA {
    Write-Info "–°–æ–∑–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è..."
    
    $config = Get-ResourceConfig -Size $ConfigSize
    
    $hpaYaml = @"
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: poliom-backend-hpa
  namespace: poliom-hr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: poliom-backend
  minReplicas: $($config.BackendReplicas)
  maxReplicas: $([math]::max(3, $config.BackendReplicas * 2))
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: poliom-frontend-hpa
  namespace: poliom-hr
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: poliom-frontend
  minReplicas: $($config.FrontendReplicas)
  maxReplicas: $([math]::max(2, $config.FrontendReplicas * 2))
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
"@

    $hpaYaml | kubectl apply -f -
    Write-Success "–ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
function Test-PostgreSQL {
    if ($SkipTests) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PostgreSQL"
        return
    }
    
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL..."
    
    try {
        $connectionString = "postgresql://$global:POSTGRES_USER`:$global:POSTGRES_PASSWORD@$global:POSTGRES_HOST`:5432/$global:POSTGRES_DB"
        
        kubectl run postgres-test --rm -i --restart=Never --image=postgres:16 -- `
            psql $connectionString `
            -c "SELECT version();" `
            -c "SELECT * FROM pg_available_extensions WHERE name = 'vector';"
        
        Write-Success "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ"
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: $_"
        exit 1
    }
}

# –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤
function Build-Images {
    if ($SkipImageBuild) {
        Write-Warning "–ü—Ä–æ–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤"
        return
    }
    
    Write-Info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    
    try {
        # Backend
        Write-Info "–°–±–æ—Ä–∫–∞ backend –æ–±—Ä–∞–∑–∞..."
        docker build -t poliom-backend:latest -f backend/Dockerfile .
        
        # Frontend
        Write-Info "–°–±–æ—Ä–∫–∞ frontend –æ–±—Ä–∞–∑–∞..."
        docker build -t poliom-frontend:latest -f frontend/Dockerfile .
        
        Write-Success "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã"
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤ registry
        $uploadToRegistry = Read-Host "–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—Ä–∞–∑—ã –≤ registry? (y/n)"
        if ($uploadToRegistry -eq "y" -or $uploadToRegistry -eq "Y") {
            $registryUrl = Read-Host "–í–≤–µ–¥–∏—Ç–µ URL registry"
            
            docker tag poliom-backend:latest "$registryUrl/poliom-backend:latest"
            docker tag poliom-frontend:latest "$registryUrl/poliom-frontend:latest"
            docker push "$registryUrl/poliom-backend:latest"
            docker push "$registryUrl/poliom-frontend:latest"
            
            Write-Success "–û–±—Ä–∞–∑—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ registry"
        }
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤: $_"
        exit 1
    }
}

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Kubernetes
function Deploy-Application {
    Write-Info "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π Kubernetes..."
    
    $k8sFiles = @("k8s/backend-deployment.yaml", "k8s/frontend-deployment.yaml", "k8s/ingress.yaml")
    
    foreach ($file in $k8sFiles) {
        if (Test-Path $file) {
            kubectl apply -f $file
            Write-Success "–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∞–π–ª: $file"
        } else {
            Write-Warning "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        }
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
function Test-DeploymentStatus {
    Write-Info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."
    
    Write-Info "Pods:"
    kubectl get pods -n poliom-hr
    
    Write-Info "Services:"
    kubectl get services -n poliom-hr
    
    Write-Info "Ingress:"
    kubectl get ingress -n poliom-hr
    
    Write-Info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤..."
    kubectl wait --for=condition=ready pod --all -n poliom-hr --timeout=300s
    
    Write-Success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
function Show-AccessInfo {
    Write-Info "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ:"
    
    try {
        $ingressIp = kubectl get ingress -n poliom-hr -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>$null
        if (-not $ingressIp) { $ingressIp = "–Ω–µ –Ω–∞–π–¥–µ–Ω" }
    } catch {
        $ingressIp = "–Ω–µ –Ω–∞–π–¥–µ–Ω"
    }
    
    Write-Host "==================================" -ForegroundColor Cyan
    Write-Host "üåê IP –∞–¥—Ä–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: $ingressIp" -ForegroundColor Cyan
    Write-Host "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://$ingressIp/grafana" -ForegroundColor Cyan
    Write-Host "üîç –õ–æ–≥–∏: kubectl logs -n poliom-hr -l app=poliom-backend" -ForegroundColor Cyan
    Write-Host "‚öôÔ∏è  –°—Ç–∞—Ç—É—Å: kubectl get all -n poliom-hr" -ForegroundColor Cyan
    Write-Host "==================================" -ForegroundColor Cyan
}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function Save-Configuration {
    $saveConfig = Read-Host "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è? (y/n)"
    if ($saveConfig -eq "y" -or $saveConfig -eq "Y") {
        $config = @{
            VK_PROJECT_NAME = $global:VK_PROJECT_NAME
            POSTGRES_HOST = $global:POSTGRES_HOST
            POSTGRES_USER = $global:POSTGRES_USER
            POSTGRES_PASSWORD = $global:POSTGRES_PASSWORD
            POSTGRES_DB = $global:POSTGRES_DB
            S3_ACCESS_KEY = $global:S3_ACCESS_KEY
            S3_SECRET_KEY = $global:S3_SECRET_KEY
            S3_BUCKET_NAME = $global:S3_BUCKET_NAME
            S3_ENDPOINT = $global:S3_ENDPOINT
        }
        
        $configPath = "vk-cloud-config.json"
        $config | ConvertTo-Json | Out-File -FilePath $configPath -Encoding UTF8
        Write-Success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: $configPath"
        Write-Warning "–í–ù–ò–ú–ê–ù–ò–ï: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–æ–ª–∏! –ù–µ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ–≥–æ –≤ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."
    }
}

# –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—é
function Show-CostSavings {
    Write-Host "üí∞ –≠–∫–æ–Ω–æ–º–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ Enterprise –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:" -ForegroundColor Green
    
    $savings = @{
        "mvp" = @{ Percent = 87; Monthly = 24000 }
        "startup" = @{ Percent = 76; Monthly = 21000 }
        "business" = @{ Percent = 57; Monthly = 15500 }
        "enterprise" = @{ Percent = 0; Monthly = 0 }
    }
    
    $saving = $savings[$ConfigSize]
    if ($saving.Percent -gt 0) {
        Write-Host "   –≠–∫–æ–Ω–æ–º–∏—è: $($saving.Percent)% (~$($saving.Monthly)‚ÇΩ/–º–µ—Å)" -ForegroundColor Green
        Write-Host "   –° welcome bonus –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 5,000‚ÇΩ" -ForegroundColor Green
    } else {
        Write-Host "   –ü–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" -ForegroundColor Cyan
    }
    Write-Host ""
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function Main {
    Write-Host "üöÄ POLIOM HR Assistant - VK Cloud Deployment" -ForegroundColor Magenta
    Write-Host "=============================================" -ForegroundColor Magenta
    
    Show-ConfigInfo -Size $ConfigSize
    Show-CostSavings
    
    try {
        Test-Dependencies
        Set-Environment
        New-Namespace
        New-ConfigMap
        New-Secret
        Deploy-Redis
        New-HPA
        Test-PostgreSQL
        Build-Images
        Deploy-Application
        Test-DeploymentStatus
        Show-AccessInfo
        Save-Configuration
        
        Write-Success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
        Write-Info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: $ConfigSize"
        Write-Info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'kubectl get all -n poliom-hr' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"
        Write-Info "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: .\vk_cloud_utils.ps1 -Action status"
        
    } catch {
        Write-ErrorMsg "–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: $_"
        Write-Info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
        exit 1
    }
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
try {
    Main
} catch {
    Write-ErrorMsg "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: $_"
    exit 1
} 