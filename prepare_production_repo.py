#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —á–∏—Å—Ç–æ–≥–æ production —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è POLIOM HR Assistant
–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
"""

import os
import shutil
import fnmatch
from pathlib import Path

# –§–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –¥–ª—è –í–ö–õ–Æ–ß–ï–ù–ò–Ø –≤ production
INCLUDE_FILES = [
    # –ö–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    'README.md',
    'requirements.txt', 
    '.env.production',
    '.env.production.example',
    '.dockerignore',
    'docker-compose.prod.yml',
    'deploy.sh',
    '.gitignore',
]

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (—Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π)
INCLUDE_DIRS = [
    'services/telegram-bot/handlers',
    'services/telegram-bot/bot',
    'services/admin-panel/templates',
    'services/admin-panel/static',
    'services/shared/database',
    'services/shared/models', 
    'services/shared/utils',
    'services/shared/sql',
]

# –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
INCLUDE_SERVICE_FILES = [
    'services/telegram-bot/Dockerfile',
    'services/telegram-bot/main.py',
    'services/telegram-bot/requirements.txt',
    'services/admin-panel/Dockerfile',
    'services/admin-panel/main.py',
    'services/admin-panel/requirements.txt',
    'services/admin-panel/celery_app.py',
    'services/admin-panel/tasks.py',
    'services/shared/requirements.txt',
]

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø
EXCLUDE_PATTERNS = [
    '*.md',  # –í—Å–µ .md —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ README.md
    'test_*.py',
    '*test*.py',
    'debug_*.py',
    'check_*.py',
    'diagnose_*.py',
    'analyze_*.py',
    'fix_*.py',
    'process_*.py',
    'setup_*.py',
    '*_test.py',
    '*test.py',
    '*debug*.py',
    '*monitor*.py',
    '*_simple.py',
    '*_safe.py',
    'quick_*.py',
    'demo_*.py',
    'direct_*.py',
    '*.bat',
    '*.log',
    '.env.local',
    '.env.example',
    '.env.pgvector',
    '__pycache__',
    'venv',
    'uploads',
    'cache',
    'logs',
    '.git',
]

def should_exclude(filepath):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–∫–ª—é—á–∏—Ç—å —Ñ–∞–π–ª"""
    filename = os.path.basename(filepath)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è README.md (–Ω–µ –∏—Å–∫–ª—é—á–∞–µ–º)
    if filename == 'README.md':
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    for pattern in EXCLUDE_PATTERNS:
        if fnmatch.fnmatch(filename, pattern):
            return True
        if fnmatch.fnmatch(filepath, pattern):
            return True
    
    return False

def copy_file_if_needed(src, dst):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏—Å–∫–ª—é—á–µ–Ω"""
    if should_exclude(src):
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω: {src}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(os.path.dirname(dst), exist_ok=True)
    
    try:
        shutil.copy2(src, dst)
        print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {src} -> {dst}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {src}: {e}")
        return False

def copy_directory_filtered(src_dir, dst_dir):
    """–ö–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    if not os.path.exists(src_dir):
        print(f"‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {src_dir}")
        return
    
    for root, dirs, files in os.walk(src_dir):
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ü–µ–ª–∏–∫–æ–º
        dirs[:] = [d for d in dirs if not should_exclude(d)]
        
        for file in files:
            src_file = os.path.join(root, file)
            rel_path = os.path.relpath(src_file, src_dir)
            dst_file = os.path.join(dst_dir, rel_path)
            
            copy_file_if_needed(src_file, dst_file)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ production —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    source_dir = "."
    target_dir = "poliom_production"
    
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∏—Å—Ç–æ–≥–æ production —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è POLIOM HR Assistant")
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {source_dir}")
    print(f"üìÅ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {target_dir}")
    print()
    
    # –£–¥–∞–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(target_dir):
        shutil.rmtree(target_dir)
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {target_dir}")
    
    # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    os.makedirs(target_dir, exist_ok=True)
    
    print("\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
    # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —Ñ–∞–π–ª—ã
    for file in INCLUDE_FILES:
        if os.path.exists(file):
            copy_file_if_needed(file, os.path.join(target_dir, file))
    
    print("\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤:")
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —Å–µ—Ä–≤–∏—Å–æ–≤
    for file in INCLUDE_SERVICE_FILES:
        if os.path.exists(file):
            copy_file_if_needed(file, os.path.join(target_dir, file))
    
    print("\nüìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:")
    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    for dir_path in INCLUDE_DIRS:
        src_dir = dir_path
        dst_dir = os.path.join(target_dir, dir_path)
        print(f"\nüìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {dir_path}")
        copy_directory_filtered(src_dir, dst_dir)
    
    print(f"\n‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÅ –ß–∏—Å—Ç—ã–π production –∫–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤: {target_dir}")
    print(f"üîó –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Git –∏ –ø—É—à–∏—Ç—å –≤: https://github.com/BochkaPiva/poliom_production.git")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_files = 0
    for root, dirs, files in os.walk(target_dir):
        total_files += len(files)
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ production: {total_files}")

if __name__ == "__main__":
    main() 