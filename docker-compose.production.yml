version: '3.8'

services:
  # PostgreSQL база данных
  postgres:
    image: postgres:15
    container_name: rag_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - rag_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: rag_redis
    ports:
      - "6379:6379"
    networks:
      - rag_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Админ-панель (легковесная версия для тестирования)
  admin-panel:
    image: python:3.11-slim
    container_name: rag_admin_panel
    working_dir: /app
    command: >
      bash -c "
        pip install fastapi uvicorn sqlalchemy psycopg2-binary redis python-multipart jinja2 aiofiles &&
        python -c 'from fastapi import FastAPI; app = FastAPI(); 
        @app.get(\"/\")
        def read_root(): return {\"message\": \"Admin Panel is running\", \"status\": \"ok\"}' > main.py &&
        uvicorn main:app --host 0.0.0.0 --port 8001
      "
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rag_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

volumes:
  postgres_data:

networks:
  rag_network:
    driver: bridge 